
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Team {
  id      Int      @id @default(autoincrement())
  name    String
  slug    String   @unique
  logoUrl String?
  players Player[]

  // Relaciones con Match
  matchesA Match[] @relation("TeamAMatches")
  matchesB Match[] @relation("TeamBMatches")

  // Relación con GameEvent (para registrar eventos de equipo, como timeouts)
  events GameEvent[]

  // Relación con Season
  seasons SeasonTeam[]
}

model Player {
  id          Int      @id @default(autoincrement())
  name        String
  number      Int
  position    String
  birthDate   DateTime?
  height      Int?
  weight      Int?
  nationality String?
  teamId      Int
  team        Team     @relation(fields: [teamId], references: [id])

  // Relaciones con GameEvent
  eventsAsPlayer   GameEvent[] @relation("PlayerEvents")
  eventsAsPlayerIn GameEvent[] @relation("PlayerInEvents")

  // Relación con PlayerMatchStats
  matchStats PlayerMatchStats[]
}

model Match {
  id            Int      @id @default(autoincrement())
  teamAId       Int
  teamBId       Int
  scheduledTime DateTime
  status        String
  scoreA        Int
  scoreB        Int
  round         Int?
  period        Int
  time          Int
  isRunning     Boolean
  foulsA        Int
  foulsB        Int
  timeoutsA     Int
  timeoutsB     Int
  activePlayersA Int[]
  activePlayersB Int[]

  // Relaciones con Team
  teamA Team @relation("TeamAMatches", fields: [teamAId], references: [id])
  teamB Team @relation("TeamBMatches", fields: [teamBId], references: [id])

  // Relación con GameEvent
  events GameEvent[]

  // Relación con PlayerMatchStats
  playerMatchStats PlayerMatchStats[]
}


// Modelo para los eventos que ocurren durante un partido
model GameEvent {
  id           Int     @id @default(autoincrement())
  teamId       Int?
  matchId      Int
  playerId     Int?
  type         String // GOAL, FOUL, YELLOW_CARD, RED_CARD, etc.
  timestamp    Int // Segundos transcurridos en el partido
  teamName     String?
  playerName   String?
  playerInId   Int?
  playerInName String?


  // Relaciones
  Team         Team?   @relation(fields: [teamId], references: [id])
  match        Match   @relation(fields: [matchId], references: [id])
  player       Player? @relation("PlayerEvents", fields: [playerId], references: [id])
  playerIn     Player? @relation("PlayerInEvents", fields: [playerInId], references: [id])
}

// Estadísticas de un jugador en un partido específico
model PlayerMatchStats {
  id                  Int @id @default(autoincrement())
  matchId             Int
  playerId            Int
  timePlayedInSeconds Int

  match  Match  @relation(fields: [matchId], references: [id])
  player Player @relation(fields: [playerId], references: [id])

  @@unique([matchId, playerId])
}

// Modelo para Temporadas
model Season {
  id    Int          @id @default(autoincrement())
  name  String
  year  Int
  teams SeasonTeam[]
}

// Tabla de unión para equipos y temporadas (tabla de posiciones)
model SeasonTeam {
  seasonId Int
  teamId   Int
  position Int
  points   Int
  played   Int
  wins     Int
  draws    Int
  losses   Int
  goalsFor        Int
  goalsAgainst    Int
  goalDifference  Int

  season Season @relation(fields: [seasonId], references: [id])
  team   Team   @relation(fields: [teamId], references: [id])

  @@id([seasonId, teamId])
}
