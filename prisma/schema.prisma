// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// CORRECCIÓN: Se añaden los estados que tu aplicación necesita.
enum MatchStatus {
  SCHEDULED
  FINISHED
  POSTPONED
  IN_PROGRESS 
  LIVE
  SELECTING_STARTERS
}

// CORRECCIÓN: Se añade el tipo de evento que faltaba.
enum EventType {
  GOAL
  ASSIST
  FOUL
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  TIMEOUT
  SHOT
}

model Team {
  id        Int          @id @default(autoincrement())
  name      String
  slug      String       @unique
  logoUrl   String?
  players   Player[]
  seasons   SeasonTeam[]
  matchesA  Match[]      @relation("TeamAMatches")
  matchesB  Match[]      @relation("TeamBMatches")
  events    GameEvent[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Player {
  id                      Int                @id @default(autoincrement())
  name                    String
  number                  Int
  position                String
  birthDate               DateTime?
  height                  Int?
  weight                  Int?
  nationality             String?
  teamId                  Int
  team                    Team               @relation(fields: [teamId], references: [id], onDelete: Cascade)
  matchStats              PlayerMatchStats[]
  gameEventsAsPlayer      GameEvent[]        @relation("PlayerEvents")
  gameEventsAsSubstituted GameEvent[]        @relation("PlayerInEvents")
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt

  @@index([teamId])
}

model Season {
  id        Int          @id @default(autoincrement())
  name      String
  year      Int          @unique
  teams     SeasonTeam[]
  matches   Match[] // Relación con Match
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model SeasonTeam {
  seasonId Int
  teamId   Int
  position Int
  points   Int
  played   Int
  wins     Int
  draws    Int
  losses   Int
  goalsFor Int
  goalsAgainst Int
  goalDifference Int

  season Season @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([seasonId, teamId])
}

model Match {
  id               Int                @id @default(autoincrement())
  scheduledTime    DateTime
  status           MatchStatus        @default(SCHEDULED)
  round            Int?
  period           Int                @default(1)
  time             Int                @default(0)
  isRunning        Boolean            @default(false)
  teamAId          Int
  teamBId          Int
  scoreA           Int                @default(0)
  scoreB           Int                @default(0)
  foulsA           Int                @default(0)
  foulsB           Int                @default(0)
  timeoutsA        Int                @default(0)
  timeoutsB        Int                @default(0)
  activePlayersA   Int[]
  activePlayersB   Int[]
  seasonId         Int // Relación con Season
  teamA            Team               @relation("TeamAMatches", fields: [teamAId], references: [id], onDelete: Restrict)
  teamB            Team               @relation("TeamBMatches", fields: [teamBId], references: [id], onDelete: Restrict)
  season           Season             @relation(fields: [seasonId], references: [id])
  events           GameEvent[]
  playerMatchStats PlayerMatchStats[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@index([teamAId])
  @@index([teamBId])
  @@index([seasonId])
}

model PlayerMatchStats {
  id                  Int @id @default(autoincrement())
  matchId             Int
  playerId            Int
  timePlayedInSeconds Int @default(0)

  match  Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([matchId, playerId])
  @@index([playerId])
}

model GameEvent {
  id           Int       @id @default(autoincrement())
  matchId      Int
  teamId       Int?
  playerId     Int?
  playerInId   Int?
  type         EventType
  timestamp    Int
  teamName     String?
  playerName   String?
  playerInName String?

  match    Match   @relation(fields: [matchId], references: [id], onDelete: Cascade)
  team     Team?   @relation(fields: [teamId], references: [id], onDelete: SetNull)
  player   Player? @relation("PlayerEvents", fields: [playerId], references: [id], onDelete: SetNull)
  playerIn Player? @relation("PlayerInEvents", fields: [playerInId], references: [id], onDelete: SetNull)

  @@index([matchId])
  @@index([teamId])
  @@index([playerId])
  @@index([playerInId])
}