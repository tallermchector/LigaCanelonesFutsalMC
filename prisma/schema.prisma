// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Team {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String   @unique
  logoUrl     String?
  description String?
  bannerUrl   String?
  instagram   String?
  facebook    String?
  whatsapp    String?
  phone       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  players     Player[]
  matchesA    Match[]  @relation("TeamAMatches")
  matchesB    Match[]  @relation("TeamBMatches")
  stats       PlayerMatchStats[]
  seasons     SeasonTeam[]
  events      GameEvent[]
}

model Player {
  id        Int      @id @default(autoincrement())
  name      String
  number    Int
  position  String
  birthDate DateTime?
  height    Int?
  weight    Int?
  nationality String?
  teamId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Team     @relation(fields: [teamId], references: [id])
  matchStats PlayerMatchStats[]
  events    GameEvent[]
}

model Season {
  id        Int          @id @default(autoincrement())
  name      String
  year      Int
  teams     SeasonTeam[]
  matches   Match[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model SeasonTeam {
  seasonId        Int
  teamId          Int
  position        Int      @default(0)
  points          Int      @default(0)
  played          Int      @default(0)
  wins            Int      @default(0)
  draws           Int      @default(0)
  losses          Int      @default(0)
  goalsFor        Int      @default(0)
  goalsAgainst    Int      @default(0)
  goalDifference  Int      @default(0)
  season          Season   @relation(fields: [seasonId], references: [id])
  team            Team     @relation(fields: [teamId], references: [id])

  @@id([seasonId, teamId])
}

model Match {
  id                Int      @id @default(autoincrement())
  teamAId           Int
  teamBId           Int
  teamA             Team     @relation("TeamAMatches", fields: [teamAId], references: [id])
  teamB             Team     @relation("TeamBMatches", fields: [teamBId], references: [id])
  scheduledTime     DateTime
  status            String
  scoreA            Int?
  scoreB            Int?
  period            Int?
  time              Int?
  foulsA            Int?
  foulsB            Int?
  timeoutsA         Int?
  timeoutsB         Int?
  isRunning         Boolean?
  activePlayersA    Int[]
  activePlayersB    Int[]
  events            GameEvent[]
  playerMatchStats  PlayerMatchStats[]
  seasonId          Int?
  season            Season?  @relation(fields: [seasonId], references: [id])
  round             Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model GameEvent {
  id           Int     @id @default(autoincrement())
  matchId      Int
  match        Match   @relation(fields: [matchId], references: [id])
  type         String
  timestamp    Int
  teamId       Int
  team         Team    @relation(fields: [teamId], references: [id])
  playerId     Int?
  player       Player? @relation(fields: [playerId], references: [id])
  playerName   String?
  teamName     String?
  playerInId   Int?
  playerInName String?
}

model PlayerMatchStats {
  matchId            Int
  playerId           Int
  timePlayedInSeconds Int      @default(0)
  match              Match    @relation(fields: [matchId], references: [id])
  player             Player   @relation(fields: [playerId], references: [id])

  @@id([matchId, playerId])
}

model Post {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  excerpt   String
  imageUrl  String
  imageBlob Bytes?
  content   String
  category  String
  published Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
