// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================================= //
//                      MODELOS                      //
// ================================================= //

model Season {
  id        Int          @id @default(autoincrement())
  name      String
  year      Int
  teams     SeasonTeam[]
  matches   Match[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Team {
  id          Int          @id @default(autoincrement())
  name        String
  slug        String       @unique
  logoUrl     String?
  description String?
  bannerUrl   String?
  instagram   String?
  facebook    String?
  whatsapp    String?
  phone       String?
  players     Player[]
  seasons     SeasonTeam[]
  matchesA    Match[]      @relation("TeamA")
  matchesB    Match[]      @relation("TeamB")
  events      GameEvent[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Player {
  id              Int                @id @default(autoincrement())
  name            String
  number          Int
  position        String // GOLERO, DEFENSA, ALA, PIVOT
  birthDate       DateTime?
  height          Int?
  weight          Int?
  nationality     String?
  teamId          Int
  team            Team               @relation(fields: [teamId], references: [id])
  events          GameEvent[]
  playerMatchStats PlayerMatchStats[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

model SeasonTeam {
  seasonId        Int
  teamId          Int
  position        Int?
  points          Int                @default(0)
  played          Int                @default(0)
  wins            Int                @default(0)
  draws           Int                @default(0)
  losses          Int                @default(0)
  goalsFor        Int                @default(0)
  goalsAgainst    Int                @default(0)
  goalDifference  Int                @default(0)
  season          Season             @relation(fields: [seasonId], references: [id])
  team            Team               @relation(fields: [teamId], references: [id])
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@id([seasonId, teamId])
}

model Match {
  id               Int                @id @default(autoincrement())
  seasonId         Int
  season           Season             @relation(fields: [seasonId], references: [id])
  round            Int?
  teamAId          Int
  teamBId          Int
  teamA            Team               @relation("TeamA", fields: [teamAId], references: [id])
  teamB            Team               @relation("TeamB", fields: [teamBId], references: [id])
  scoreA           Int                @default(0)
  scoreB           Int                @default(0)
  status           String // SCHEDULED, LIVE, FINISHED
  scheduledTime    DateTime
  period           Int                @default(1)
  time             Int                @default(1200) // 20 minutes in seconds
  foultsA          Int                @default(0)
  foultsB          Int                @default(0)
  timeoutsA        Int                @default(1)
  timeoutsB        Int                @default(1)
  isRunning        Boolean            @default(false)
  events           GameEvent[]
  playerMatchStats PlayerMatchStats[]
  activePlayersA   Int[]
  activePlayersB   Int[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model GameEvent {
  id           Int      @id @default(autoincrement())
  matchId      Int
  match        Match    @relation(fields: [matchId], references: [id])
  type         String // GOAL, ASSIST, YELLOW_CARD, RED_CARD, FOUL, TIMEOUT, SHOT, SUBSTITUTION
  timestamp    Int // Game time in seconds when event occurred
  teamId       Int
  team         Team     @relation(fields: [teamId], references: [id])
  playerId     Int?
  player       Player?  @relation(fields: [playerId], references: [id])
  playerName   String?
  teamName     String?
  playerInId   Int?
  playerInName String?
}

model PlayerMatchStats {
  id                  Int    @id @default(autoincrement())
  matchId             Int
  playerId            Int
  timePlayedInSeconds Int    @default(0)
  match               Match  @relation(fields: [matchId], references: [id])
  player              Player @relation(fields: [playerId], references: [id])

  @@unique([matchId, playerId])
}
