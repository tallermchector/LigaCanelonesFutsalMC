// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Modelos de la base de datos

model Team {
  id             Int          @id @default(autoincrement())
  name           String
  slug           String       @unique
  logoUrl        String?
  players        Player[]
  matchesAsTeamA Match[]      @relation("TeamAMatches")
  matchesAsTeamB Match[]      @relation("TeamBMatches")
  gameEvents     GameEvent[]
  SeasonTeam     SeasonTeam[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  description    String?
  bannerUrl      String?
  instagram      String?
  facebook       String?
  whatsapp       String?
  phone          String?
}

model Player {
  id                Int                @id @default(autoincrement())
  name              String
  number            Int
  position          PlayerPositionType
  birthDate         DateTime?
  height            Int?
  weight            Int?
  nationality       String?
  teamId            Int
  team              Team               @relation(fields: [teamId], references: [id])
  gameEvents        GameEvent[]
  playerMatchStats  PlayerMatchStats[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  avatarUrl         String?
}

model Match {
  id               Int                @id @default(autoincrement())
  teamAId          Int
  teamBId          Int
  teamA            Team               @relation("TeamAMatches", fields: [teamAId], references: [id])
  teamB            Team               @relation("TeamBMatches", fields: [teamBId], references: [id])
  scheduledTime    DateTime
  status           MatchStatus
  scoreA           Int?
  scoreB           Int?
  period           Int?
  time             Int? // in seconds
  foulsA           Int?
  foulsB           Int?
  timeoutsA        Int?
  timeoutsB        Int?
  isRunning        Boolean?
  activePlayersA   Int[]
  activePlayersB   Int[]
  events           GameEvent[]
  playerMatchStats PlayerMatchStats[]
  seasonId         Int
  season           Season             @relation(fields: [seasonId], references: [id])
  round            Int?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model GameEvent {
  id            Int       @id @default(autoincrement())
  matchId       Int
  match         Match     @relation(fields: [matchId], references: [id])
  type          EventType
  timestamp     Int // game time in seconds
  teamId        Int
  team          Team      @relation(fields: [teamId], references: [id])
  playerId      Int?
  player        Player?   @relation(fields: [playerId], references: [id])
  playerName    String?
  teamName      String?
  playerInId    Int?
  playerInName  String?
  createdAt     DateTime  @default(now())
}

model PlayerMatchStats {
  id                  Int     @id @default(autoincrement())
  matchId             Int
  match               Match   @relation(fields: [matchId], references: [id])
  playerId            Int
  player              Player  @relation(fields: [playerId], references: [id])
  timePlayedInSeconds Int
  // Otras estadísticas aquí...

  @@unique([matchId, playerId])
}

model Season {
  id      Int          @id @default(autoincrement())
  name    String
  year    Int
  teams   SeasonTeam[]
  matches Match[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model SeasonTeam {
  seasonId        Int
  teamId          Int
  season          Season         @relation(fields: [seasonId], references: [id])
  team            Team           @relation(fields: [teamId], references: [id])
  position        Int?
  points          Int?
  played          Int?
  wins            Int?
  draws           Int?
  losses          Int?
  goalsFor        Int?
  goalsAgainst    Int?
  goalDifference  Int?

  @@id([seasonId, teamId])
}

// Enums

enum PlayerPositionType {
  GOLERO
  DEFENSA
  ALA
  PIVOT
}

enum MatchStatus {
  SCHEDULED
  LIVE
  FINISHED
  POSTPONED
  IN_PROGRESS
  SELECTING_STARTERS
}

enum EventType {
  GOAL
  ASSIST
  FOUL
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  TIMEOUT
  SHOT
  MATCH_START
  PERIOD_START
  MATCH_END
}
