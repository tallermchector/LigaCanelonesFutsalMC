// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model Season {
  id        Int          @id @default(autoincrement())
  name      String
  year      Int
  teams     SeasonTeam[]
  matches   Match[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Team {
  id          Int          @id @default(autoincrement())
  name        String
  slug        String       @unique
  logoUrl     String?
  description String?      @db.Text
  bannerUrl   String?
  instagram   String?
  facebook    String?
  whatsapp    String?
  phone       String?
  players     Player[]
  seasons     SeasonTeam[]
  matchesA    Match[]      @relation("TeamAMatches")
  matchesB    Match[]      @relation("TeamBMatches")
  events      GameEvent[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Player {
  id        Int      @id @default(autoincrement())
  name      String
  number    Int
  position  String // e.g., 'GOLERO', 'DEFENSA', 'ALA', 'PIVOT'
  birthDate DateTime?
  height    Int?
  weight    Int?
  nationality String?
  teamId    Int
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  matchStats PlayerMatchStats[]
  gameEvents GameEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SeasonTeam {
  seasonId Int
  teamId   Int
  position Int     @default(0)
  points   Int     @default(0)
  played   Int     @default(0)
  wins     Int     @default(0)
  draws    Int     @default(0)
  losses   Int     @default(0)
  goalsFor Int     @default(0)
  goalsAgainst Int @default(0)
  goalDifference Int @default(0)

  season Season @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([seasonId, teamId])
}

model Match {
  id            Int      @id @default(autoincrement())
  seasonId      Int
  round         Int?
  teamAId       Int
  teamBId       Int
  scheduledTime DateTime
  status        String   // e.g., 'SCHEDULED', 'LIVE', 'FINISHED'
  scoreA        Int?
  scoreB        Int?
  period        Int?     // e.g., 1 or 2
  time          Int?     // Remaining time in seconds
  foulsA        Int?
  foulsB        Int?
  timeoutsA     Int?
  timeoutsB     Int?
  isRunning     Boolean? @default(false)
  activePlayersA Int[]
  activePlayersB Int[]
  
  season          Season             @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  teamA           Team               @relation("TeamAMatches", fields: [teamAId], references: [id], onDelete: Cascade)
  teamB           Team               @relation("TeamBMatches", fields: [teamBId], references: [id], onDelete: Cascade)
  events          GameEvent[]
  playerMatchStats PlayerMatchStats[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlayerMatchStats {
  matchId             Int
  playerId            Int
  timePlayedInSeconds Int @default(0)

  match  Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@id([matchId, playerId])
}

model GameEvent {
  id           Int     @id @default(autoincrement())
  matchId      Int
  type         String  // e.g., 'GOAL', 'ASSIST', 'FOUL', 'YELLOW_CARD', 'RED_CARD', 'TIMEOUT', 'SUBSTITUTION'
  timestamp    Int     // Game time in seconds when event occurred
  teamId       Int
  playerId     Int?
  playerInId   Int?
  
  match        Match   @relation(fields: [matchId], references: [id], onDelete: Cascade)
  team         Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  player       Player? @relation(fields: [playerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
