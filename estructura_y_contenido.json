{
    "nombre": "src",
    "tipo": "directorio",
    "hijos": [
        {
            "nombre": "informe",
            "tipo": "directorio",
            "hijos": [
                {
                    "nombre": "Informe_Estado_Actual.md",
                    "tipo": "archivo",
                    "contenido": "# Informe de Estado del Proyecto: Liga Canelones Futsal\n\n## 1. Resumen Ejecutivo\n\nEste documento describe el estado actual de la aplicación web **Liga Canelones Futsal**. La plataforma está diseñada para ser el punto central de información para aficionados, jugadores y administradores de la liga, ofreciendo noticias, seguimiento de partidos y, en el futuro, resultados y estadísticas en tiempo real. El proyecto se encuentra en una fase de desarrollo de frontend con una capa de datos simulada (mock data), lo que ha permitido construir y validar la interfaz de usuario de forma independiente antes de la integración con un backend.\n\n## 2. Stack Tecnológico y Arquitectura\n\nLa aplicación se está construyendo sobre un stack tecnológico moderno basado en JavaScript/TypeScript, enfocado en el rendimiento y la experiencia de usuario.\n\n- **Framework Principal**: **Next.js** (con App Router) - Permite renderizado del lado del servidor (SSR) e híbrido, optimizando el rendimiento y el SEO.\n- **Librería UI**: **React** - Para la construcción de interfaces de usuario dinámicas y componentizadas.\n- **Lenguaje**: **TypeScript** - Añade tipado estático a JavaScript, mejorando la robustez y mantenibilidad del código.\n- **Estilos**: **Tailwind CSS** - Un framework CSS \"utility-first\" para un diseño rápido y personalizable.\n- **Componentes UI**: **ShadCN/UI** - Una colección de componentes reutilizables y accesibles construidos sobre Radix UI y Tailwind CSS.\n- **Inteligencia Artificial**: **Genkit (Google AI)** - Utilizado para funcionalidades de IA, como el resumen de noticias a partir de una URL.\n\nLa estructura del proyecto dentro del directorio `src/` está organizada para facilitar la escalabilidad y el mantenimiento:\n\n- `src/app/`: Contiene las rutas principales de la aplicación, siguiendo la convención del App Router de Next.js. Aquí residen la página de inicio (`page.tsx`) y las rutas del módulo de control (`controles/`).\n- `src/components/`: Alberga todos los componentes reutilizables de React. Se subdivide en `ui/` para componentes base de ShadCN, `layout/` para la estructura general (Header, Footer), y `controles/` para componentes específicos del panel de administración.\n- `src/actions/`: Contiene las \"Server Actions\" de Next.js. Aquí reside la lógica de negocio que se ejecuta en el servidor, como la obtención de datos simulados de partidos (`match-actions.ts`).\n- `src/data/`: Archivos con datos estáticos o simulados (mock data), como la lista de equipos y jugadores (`teams.ts`).\n- `src/lib/`: Utilidades y funciones auxiliares, como `utils.ts` para fusionar clases de Tailwind.\n- `src/types/`: Definiciones de tipos de TypeScript (`index.ts`) compartidos en toda la aplicación para garantizar la consistencia de los datos.\n- `src/ai/`: Lógica relacionada con la Inteligencia Artificial, incluyendo los flujos de Genkit.\n\n## 3. Funcionalidad Implementada - Módulos Principales\n\n### Página Principal (`/src/app/page.tsx`)\nLa página de inicio sirve como el portal principal para los visitantes. Está compuesta por:\n- **Header y Footer**: Componentes de navegación y pie de página consistentes en todo el sitio.\n- **Hero Section**: Una sección de bienvenida visualmente atractiva con un título principal y llamadas a la acción.\n- **NewsSummary**: Un componente interactivo que integra IA. Permite a los usuarios pegar la URL de un artículo de noticias y utiliza el flujo de Genkit `summarizeFutsalNews` para generar y mostrar un resumen conciso del contenido.\n\n### Módulo de Control de Partidos (`/src/app/controles`)\nEste módulo está diseñado para ser utilizado por los administradores de la liga.\n- **Página de Selección (`/controles/page.tsx`):** Actúa como el centro de mando para la gestión de partidos. Presenta una lista de partidos que se pueden filtrar por su estado (\"Programados\", \"En Vivo\", \"Finalizados\") mediante un sistema de pestañas. Cada partido se visualiza a través de una tarjeta `ControlMatchCard`.\n- **Página de Detalle (`/controles/[id]/page.tsx`):** Esta página ha sido refactorizada para ser un panel de control interactivo en tiempo real. Utiliza un `GameProvider` (React Context) para gestionar de forma centralizada todo el estado del partido. Un administrador puede seleccionar jugadores de cada equipo y registrar eventos específicos del partido (goles, faltas) a través de botones dedicados, y el marcador (`Scoreboard`) se actualiza dinámicamente. La lógica de estado es local del cliente y se inicializa con datos simulados.\n\n## 4. Capa de Datos (Simulada)\n\nActualmente, la aplicación opera con una capa de datos completamente simulada para permitir un desarrollo ágil del frontend.\n- El archivo `src/actions/match-actions.ts` contiene funciones que imitan llamadas a una API, pero en su lugar devuelven datos estáticos del archivo `src/data/teams.ts` con una latencia artificial para simular una carga de red.\n- El archivo `src/data/teams.ts` contiene un array de objetos que define los equipos de la liga y sus respectivas plantillas de jugadores, sirviendo como la \"base de datos\" temporal del proyecto.\n\n## 5. Conclusión y Próximos Pasos Sugeridos\n\nEl frontend para las funcionalidades clave de la aplicación \"Liga Canelones Futsal\" está construido y es funcional. Opera sobre una capa de datos simulada que permite el desarrollo y la prueba de la UI de forma aislada. La arquitectura es modular y escalable, preparada para futuras expansiones.\n\nLos siguientes pasos lógicos sugeridos para el proyecto son:\n1.  **Persistencia de Datos**: Conectar la aplicación a un backend real (como Firebase Firestore) para reemplazar los datos simulados. Esto implicaría refactorizar las `actions` para que realicen llamadas reales a la base de datos para guardar y recuperar el estado de los partidos y los eventos.\n2.  **Autenticación**: Implementar un sistema de autenticación (ej. Firebase Auth) para proteger el módulo de controles y asegurar que solo los administradores autorizados puedan gestionar los partidos.\n3.  **Visualización de Estadísticas**: Construir la página de estadísticas (`/partidos/[id]/estadisticas`), utilizando los datos de eventos registrados durante el partido para generar y mostrar métricas relevantes (goleadores, asistencias, etc.).\n4.  **Despliegue**: Preparar la aplicación para el despliegue en una plataforma de hosting como Firebase App Hosting.\n"
                },
                {
                    "nombre": "readme.md",
                    "tipo": "archivo",
                    "contenido": "\n# Informe del Proyecto: Liga Canelones Futsal\n\n## 1. Resumen General\n\nEste documento describe el estado actual de la aplicación web **Liga Canelones Futsal**. La plataforma está diseñada para ser el punto central de información para aficionados, jugadores y administradores de la liga, ofreciendo noticias, seguimiento de partidos y resultados en tiempo real.\n\nEl proyecto se enfoca en una experiencia de usuario moderna, limpia y altamente funcional, con un diseño responsivo y accesible.\n\n## 2. Stack Tecnológico\n\nLa aplicación se está construyendo sobre un stack tecnológico moderno basado en JavaScript/TypeScript:\n\n- **Framework Principal**: [Next.js](https://nextjs.org/) (con App Router) - Permite renderizado del lado del servidor (SSR) e híbrido, optimizando el rendimiento y el SEO.\n- **Librería UI**: [React](https://react.dev/) - Para la construcción de interfaces de usuario dinámicas y componentizadas.\n- **Lenguaje**: [TypeScript](https://www.typescriptlang.org/) - Añade tipado estático a JavaScript, mejorando la robustez y mantenibilidad del código.\n- **Estilos**: [Tailwind CSS](https://tailwindcss.com/) - Un framework CSS \"utility-first\" para un diseño rápido y personalizable.\n- **Componentes UI**: [ShadCN/UI](https://ui.shadcn.com/) - Una colección de componentes reutilizables y accesibles construidos sobre Radix UI y Tailwind CSS.\n- **Inteligencia Artificial**: [Genkit (Google AI)](https://firebase.google.com/docs/genkit) - Utilizado para funcionalidades de IA, como el resumen de noticias.\n\n## 3. Estructura Lógica del Proyecto\n\nEl código fuente está organizado de la siguiente manera para facilitar la escalabilidad y el mantenimiento:\n\n- `src/app/`: Contiene las rutas principales de la aplicación, siguiendo la convención del App Router de Next.js.\n  - `page.tsx`: Página de inicio.\n  - `controles/`: Rutas relacionadas con el panel de administración.\n    - `page.tsx`: Página principal del panel que lista los partidos.\n    - `[id]/page.tsx`: Página dinámica para controlar un partido específico.\n- `src/components/`: Alberga todos los componentes reutilizables de React.\n  - `ui/`: Componentes base de ShadCN (Button, Card, Input, etc.).\n  - `layout/`: Componentes estructurales como `Header` y `Footer`.\n  - `controles/`: Componentes específicos para el panel de control, como `ControlMatchCard` y `MatchListSkeleton`.\n  - `hero.tsx`, `news-summary.tsx`: Componentes de secciones principales de la página de inicio.\n- `src/actions/`: Contiene las \"Server Actions\" de Next.js. Aquí reside la lógica de negocio que se ejecuta en el servidor, como la obtención de datos de partidos (`match-actions.ts`).\n- `src/data/`: Archivos con datos estáticos o simulados (mock data), como la lista de equipos (`teams.ts`).\n- `src/ai/`: Lógica relacionada con la Inteligencia Artificial.\n  - `flows/`: Define los flujos de Genkit, como el de resumen de noticias.\n- `src/lib/`: Utilidades y funciones auxiliares, como `cn` para fusionar clases de Tailwind.\n- `src/hooks/`: Hooks personalizados de React, como `useToast` para notificaciones.\n- `src/types/`: Definiciones de tipos de TypeScript compartidos en toda la aplicación.\n\n## 4. Funcionalidades Implementadas\n\nA la fecha, el proyecto cuenta con las siguientes características funcionales:\n\n### 4.1. Página de Inicio (`/`)\n- **Header y Footer**: Componentes de navegación y pie de página consistentes en todo el sitio.\n- **Sección Hero**: Una sección de bienvenida visualmente atractiva con un título principal, un subtítulo y botones de llamada a la acción (CTA) que dirigen a otras secciones de la página.\n- **Resumen de Noticias con IA**: Un formulario donde el usuario puede pegar la URL de un artículo de noticias y obtener un resumen generado por inteligencia artificial a través de un flujo de Genkit.\n- **Secciones Placeholder**: Espacios definidos para futuras secciones de \"Equipos\" y \"Resultados\".\n\n### 4.2. Panel de Control (`/controles`)\n- **Visualización de Partidos**: Una página protegida (conceptualmente para administradores) que carga y muestra una lista de todos los partidos.\n- **Filtrado por Estado**: Utiliza un sistema de pestañas (Tabs) para filtrar los partidos entre \"Programados\", \"En Vivo\" y \"Finalizados\".\n- **Tarjetas de Partido (`ControlMatchCard`)**: Cada partido se muestra en una tarjeta individual con la información de los equipos, logos y fecha/hora.\n- **Acciones Condicionales**: Las tarjetas de partido muestran diferentes botones de acción según el estado del mismo, permitiendo \"Controlar\" un partido programado/en vivo o ver \"Estadísticas\" de uno finalizado.\n- **Feedback de Carga y Errores**: Muestra un esqueleto de UI (`MatchListSkeleton`) mientras se cargan los datos y notificaciones (`toast`) si ocurre un error en la carga.\n\n### 4.3. Página de Control de Partido (`/controles/[id]`)\n- **Gestión Individual**: Página dinámica que permite gestionar un partido específico.\n- **Visualización del Marcador**: Muestra los nombres y logos de los equipos enfrentados y su marcador actual.\n- **Control del Marcador**: Incluye controles (botones `+` y `-` e inputs numéricos) para modificar el marcador de cada equipo en tiempo real.\n- **Control de Estado del Partido**: Presenta botones para \"Iniciar Partido\" (si está programado) o \"Finalizar Partido\" (si está en vivo), simulando el ciclo de vida de un encuentro.\n- **Navegación**: Incluye un botón para regresar fácilmente al listado principal del panel de control.\n"
                }
            ]
        },
        {
            "nombre": "components",
            "tipo": "directorio",
            "hijos": [
                {
                    "nombre": "icons.tsx",
                    "tipo": "archivo",
                    "contenido": "import type { SVGProps } from \"react\";\nimport Image from 'next/image';\n\nexport function FutsalBallIcon(props: SVGProps<SVGSVGElement>) {\n  // Return an Image component pointing to the new SVG\n  // The props like className can be passed to the Image component for styling\n  return <Image src=\"/logofu.svg\" alt=\"Futsal ball icon\" width={24} height={24} {...props} />;\n}\n"
                },
                {
                    "nombre": "landing",
                    "tipo": "directorio",
                    "hijos": [
                        {
                            "nombre": "LiveMatchesBanner.tsx",
                            "tipo": "archivo",
                            "contenido": "\nimport { getLiveMatches } from '@/actions/match-actions';\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselNext,\n  CarouselPrevious,\n} from \"@/components/ui/carousel\";\nimport { LiveMatchCard } from './LiveMatchCard';\n\nexport async function LiveMatchesBanner() {\n  const liveMatches = await getLiveMatches();\n\n  if (liveMatches.length === 0) {\n    return null;\n  }\n\n  return (\n    <section id=\"live-matches\" className=\"w-full py-12 md:py-24 lg:py-32 bg-muted/40\">\n      <div className=\"container px-4 md:px-6\">\n        <h2 className=\"text-3xl font-bold text-center mb-8 text-primary\">Sigue la Acción en Vivo</h2>\n        <Carousel \n          className=\"w-full max-w-xs sm:max-w-xl md:max-w-3xl lg:max-w-5xl mx-auto\"\n          opts={{\n            align: \"start\",\n            loop: true,\n          }}\n        >\n          <CarouselContent>\n            {liveMatches.map((match) => (\n              <CarouselItem key={match.id} className=\"md:basis-1/2 lg:basis-1/3\">\n                <div className=\"p-1\">\n                  <LiveMatchCard match={match} />\n                </div>\n              </CarouselItem>\n            ))}\n          </CarouselContent>\n          <CarouselPrevious />\n          <CarouselNext />\n        </Carousel>\n      </div>\n    </section>\n  );\n}\n"
                        },
                        {
                            "nombre": "FinishedMatchCard.tsx",
                            "tipo": "archivo",
                            "contenido": "\n'use client';\n\nimport type { FullMatch } from '@/types';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { BarChart2, Calendar } from 'lucide-react';\nimport { useEffect, useState } from 'react';\n\ninterface FinishedMatchCardProps {\n  match: FullMatch;\n}\n\nexport function FinishedMatchCard({ match }: FinishedMatchCardProps) {\n    const [formattedDate, setFormattedDate] = useState('');\n\n    useEffect(() => {\n      if (match.scheduledTime) {\n        setFormattedDate(new Date(match.scheduledTime).toLocaleDateString('es-UY', {\n          day: '2-digit',\n          month: '2-digit',\n          year: 'numeric'\n        }));\n      }\n    }, [match.scheduledTime]);\n\n\n  return (\n    <Link href={`/partidos/${match.id}/estadisticas`} className=\"block group\">\n      <Card className=\"flex flex-col h-full overflow-hidden shadow-lg transition-transform duration-300 hover:scale-105 hover:shadow-primary/20 bg-card\">\n        <CardHeader className=\"p-4\">\n            <CardTitle className=\"text-base font-bold truncate text-center text-card-foreground\">\n                {match.teamA.name} vs {match.teamB.name}\n            </CardTitle>\n        </CardHeader>\n        <CardContent className=\"flex-grow flex items-center justify-around p-4\">\n          <div className=\"flex flex-col items-center gap-2 text-center w-24\">\n            <Image\n              src={match.teamA.logoUrl || `https://avatar.vercel.sh/${match.teamA.name}.png`}\n              alt={`Logo de ${match.teamA.name}`}\n              width={56}\n              height={56}\n              className=\"rounded-full aspect-square object-contain\"\n            />\n          </div>\n          <div className=\"text-4xl font-bold text-primary tabular-nums\">\n            {match.scoreA} - {match.scoreB}\n          </div>\n           <div className=\"flex flex-col items-center gap-2 text-center w-24\">\n            <Image\n              src={match.teamB.logoUrl || `https://avatar.vercel.sh/${match.teamB.name}.png`}\n              alt={`Logo de ${match.teamB.name}`}\n              width={56}\n              height={56}\n              className=\"rounded-full aspect-square object-contain\"\n            />\n          </div>\n        </CardContent>\n        <CardFooter className=\"p-3 bg-accent text-accent-foreground justify-center text-sm font-medium group-hover:bg-accent/90 transition-colors\">\n            <div className='flex items-center gap-2'>\n                <BarChart2 className=\"h-4 w-4\" />\n                Ver Estadísticas\n            </div>\n            {formattedDate && (\n                <>\n                    <span className=\"mx-2\">|</span>\n                    <div className='flex items-center gap-2'>\n                        <Calendar className=\"h-4 w-4\" />\n                        {formattedDate}\n                    </div>\n                </>\n            )}\n        </CardFooter>\n      </Card>\n    </Link>\n  );\n}\n"
                        },
                        {
                            "nombre": "LiveMatchCard.tsx",
                            "tipo": "archivo",
                            "contenido": "\n'use client';\n\nimport type { FullMatch } from '@/types';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Tv } from 'lucide-react';\n\ninterface LiveMatchCardProps {\n  match: FullMatch;\n}\n\nexport function LiveMatchCard({ match }: LiveMatchCardProps) {\n  return (\n    <Link href={`/banner/${match.id}`} className=\"block group\">\n      <Card className=\"overflow-hidden shadow-lg transition-transform duration-300 group-hover:scale-105 group-hover:shadow-primary/20\">\n        <CardHeader className=\"p-4 bg-card-foreground/5 flex-row items-center justify-between\">\n            <h3 className=\"font-bold text-sm truncate\">{match.teamA.name} vs {match.teamB.name}</h3>\n            <Badge variant=\"destructive\" className=\"animate-pulse\">\n                <Tv className=\"mr-1.5 h-3 w-3\" />\n                EN VIVO\n            </Badge>\n        </CardHeader>\n        <CardContent className=\"p-4 flex items-center justify-around\">\n          <div className=\"flex flex-col items-center gap-2 text-center w-20\">\n            <Image\n              src={match.teamA.logoUrl || `https://avatar.vercel.sh/${match.teamA.name}.png`}\n              alt={`Logo de ${match.teamA.name}`}\n              width={48}\n              height={48}\n              className=\"rounded-full aspect-square object-contain\"\n            />\n            <span className=\"font-semibold text-xs truncate w-full\">{match.teamA.name}</span>\n          </div>\n          <div className=\"text-3xl font-bold text-primary tabular-nums\">\n            {match.scoreA} - {match.scoreB}\n          </div>\n           <div className=\"flex flex-col items-center gap-2 text-center w-20\">\n            <Image\n              src={match.teamB.logoUrl || `https://avatar.vercel.sh/${match.teamB.name}.png`}\n              alt={`Logo de ${match.teamB.name}`}\n              width={48}\n              height={48}\n              className=\"rounded-full aspect-square object-contain\"\n            />\n            <span className=\"font-semibold text-xs truncate w-full\">{match.teamB.name}</span>\n          </div>\n        </CardContent>\n      </Card>\n    </Link>\n  );\n}\n"
                        },
                        {
                            "nombre": "FinishedMatches.tsx",
                            "tipo": "archivo",
                            "contenido": "\nimport { getFinishedMatches } from '@/actions/match-actions';\nimport { FinishedMatchCard } from './FinishedMatchCard';\nimport { Button } from '../ui/button';\nimport Link from 'next/link';\n\nexport async function FinishedMatches() {\n    const finishedMatches = await getFinishedMatches();\n\n    if (finishedMatches.length === 0) {\n        return null;\n    }\n\n    // Show only the latest 6 matches\n    const latestMatches = finishedMatches.slice(0, 6);\n\n    return (\n        <section id=\"results\" className=\"py-20 text-center bg-secondary\">\n            <div className=\"container\">\n                <h2 className=\"text-3xl font-bold text-primary mb-2\">Resultados Recientes</h2>\n                <p className=\"text-muted-foreground mb-8\">Revive los momentos de los últimos partidos finalizados.</p>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {latestMatches.map(match => (\n                        <FinishedMatchCard key={match.id} match={match} />\n                    ))}\n                </div>\n                <div className=\"mt-12\">\n                    <Button asChild variant=\"outline\">\n                        <Link href=\"/partidos\">Ver todos los resultados</Link>\n                    </Button>\n                </div>\n            </div>\n        </section>\n    );\n}\n"
                        }
                    ]
                },
                {
                    "nombre": "layout",
                    "tipo": "directorio",
                    "hijos": [
                        {
                            "nombre": "header.tsx",
                            "tipo": "archivo",
                            "contenido": "import Link from 'next/link';\nimport Image from 'next/image';\nimport { Button } from '@/components/ui/button';\nimport { Sheet, SheetContent, SheetTrigger, SheetTitle } from '@/components/ui/sheet';\nimport { Menu } from 'lucide-react';\nimport { VisuallyHidden } from '@radix-ui/react-visually-hidden';\n\n\nexport function Header() {\n  const navLinks = [\n    { href: '/', label: 'Inicio' },\n    { href: '/partidos', label: 'Partidos' },\n    { href: '/blog', label: 'Noticias' },\n    { href: '/banner', label: 'Banners' },\n    { href: '/controles', label: 'Controles' },\n  ];\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b border-border/40 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"container flex h-14 max-w-screen-2xl items-center\">\n        <div className=\"mr-4 flex items-center\">\n          <Link href=\"/\" className=\"mr-6 flex items-center space-x-2\">\n            <Image src=\"/logofu.svg\" alt=\"Liga Futsal Logo\" width={24} height={24} />\n            <span className=\"font-bold sm:inline-block\">\n              Liga Canelones Futsal\n            </span>\n          </Link>\n          <nav className=\"hidden gap-6 md:flex\">\n            {navLinks.map((link) => (\n              <Link\n                key={`${link.href}-${link.label}`}\n                href={link.href}\n                className=\"text-sm font-medium text-foreground/60 transition-colors hover:text-foreground/80\"\n              >\n                {link.label}\n              </Link>\n            ))}\n          </nav>\n        </div>\n        <div className=\"flex flex-1 items-center justify-end space-x-2\">\n          <div className=\"hidden md:block\">\n             <Button variant=\"accent\" size=\"sm\" asChild>\n                <Link href=\"/controles\" aria-label=\"Navegar al panel de control\">Panel de Control</Link>\n              </Button>\n          </div>\n          <Sheet>\n            <SheetTrigger asChild>\n              <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden\">\n                <Menu className=\"h-5 w-5\" />\n                <span className=\"sr-only\">Toggle Menu</span>\n              </Button>\n            </SheetTrigger>\n            <SheetContent side=\"right\" className=\"w-[300px] sm:w-[400px]\">\n              <SheetTitle><VisuallyHidden>Menú de navegación móvil</VisuallyHidden></SheetTitle>\n              <nav className=\"flex flex-col gap-4 pt-6\">\n                {navLinks.map((link) => (\n                  <Link\n                    key={`${link.href}-${link.label}-mobile`}\n                    href={link.href}\n                    className=\"block px-2 py-1 text-lg\"\n                  >\n                    {link.label}\n                  </Link>\n                ))}\n                 <Button variant=\"accent\" size=\"sm\" asChild className=\"mt-4\">\n                    <Link href=\"/controles\" aria-label=\"Navegar al panel de control\">Panel de Control</Link>\n                  </Button>\n              </nav>\n            </SheetContent>\n          </Sheet>\n        </div>\n      </div>\n    </header>\n  );\n}\n"
                        },
                        {
                            "nombre": "footer.tsx",
                            "tipo": "archivo",
                            "contenido": "import Image from 'next/image';\n\nexport function Footer() {\n  return (\n    <footer className=\"w-full bg-secondary\">\n      <div className=\"container flex flex-col items-center justify-between gap-4 py-10 md:h-24 md:flex-row md:py-0\">\n        <div className=\"flex flex-col items-center gap-4 px-8 md:flex-row md:gap-2 md:px-0\">\n          <Image src=\"/logofu.svg\" alt=\"Liga Futsal Logo\" width={24} height={24} />\n          <p className=\"text-center text-sm leading-loose text-muted-foreground md:text-left\">\n            © {new Date().getFullYear()} Liga Canelones Futsal. Todos los derechos reservados.\n          </p>\n        </div>\n        <div className=\"flex items-center gap-4 text-sm font-medium text-muted-foreground\">\n          <a href=\"#\" className=\"transition-colors hover:text-foreground\">Política de Privacidad</a>\n          <a href=\"#\" className=\"transition-colors hover:text-foreground\">Términos de Servicio</a>\n        </div>\n      </div>\n    </footer>\n  );\n}\n"
                        }
                    ]
                },
                {
                    "nombre": "banner",
                    "tipo": "directorio",
                    "hijos": [
                        {
                            "nombre": "ScoreboardHeader.tsx",
                            "tipo": "archivo",
                            "contenido": "\n'use client';\n\nimport { Shield, Timer } from 'lucide-react';\nimport Image from 'next/image';\nimport { cn } from '@/lib/utils';\n\nconst formatTime = (seconds: number) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`;\n};\n\ninterface StatDisplayProps {\n  icon: React.ReactNode;\n  value: number;\n  label: string;\n}\n\nconst StatDisplay: React.FC<StatDisplayProps> = ({ icon, value, label }) => (\n  <div className=\"flex items-center gap-2\">\n    {icon}\n    <div className=\"text-left\">\n      <div className=\"text-2xl font-bold\">{value}</div>\n      <div className=\"text-xs text-white/80\">{label}</div>\n    </div>\n  </div>\n);\n\ninterface ScoreboardHeaderProps {\n  team1Name: string;\n  team1Logo: string;\n  score1: number;\n  fouls1: number;\n  timeouts1: number;\n  team2Name: string;\n  team2Logo: string;\n  score2: number;\n  fouls2: number;\n  timeouts2: number;\n  timeLeft: number;\n  period: string;\n}\n\nexport const ScoreboardHeader: React.FC<ScoreboardHeaderProps> = ({\n  team1Name,\n  team1Logo,\n  score1,\n  fouls1,\n  timeouts1,\n  team2Name,\n  team2Logo,\n  score2,\n  fouls2,\n  timeouts2,\n  timeLeft,\n  period,\n}) => {\n  return (\n    <div className={cn(\"relative font-headline rounded-xl overflow-hidden bg-gray-900 text-white w-full max-w-6xl mx-auto shadow-2xl border-2 border-primary/50\")}>\n      <div\n        className=\"absolute inset-0 bg-cover bg-center opacity-10\"\n        style={{ backgroundImage: \"url('/banner_.jpg')\" }}\n      />\n      <div className=\"absolute inset-0 bg-gradient-to-r from-blue-900/50 to-red-900/50 opacity-50\" />\n      <div className=\"relative p-6\">\n        <div className=\"flex justify-between items-center\">\n          {/* Team 1 Section */}\n          <div className=\"flex items-center gap-6 w-1/3\">\n            <Image\n              src={team1Logo || `https://avatar.vercel.sh/${team1Name}.png`}\n              alt={`${team1Name} logo`}\n              width={100}\n              height={100}\n              className=\"rounded-full bg-white/10 p-2\"\n            />\n            <div className=\"text-left\">\n              <h1 className=\"text-4xl font-extrabold tracking-tight truncate w-64\">{team1Name}</h1>\n              <div className=\"flex items-center gap-6 mt-2\">\n                <StatDisplay icon={<Shield className=\"w-8 h-8 text-yellow-400\" />} value={fouls1} label=\"Faltas\" />\n                <StatDisplay icon={<Timer className=\"w-8 h-8 text-green-400\" />} value={timeouts1} label=\"T. Muertos\" />\n              </div>\n            </div>\n          </div>\n\n          {/* Time and Score Section */}\n          <div className=\"text-center w-1/3\">\n            <div className=\"text-8xl font-black text-primary animate-pulse\">{`${score1} - ${score2}`}</div>\n            <div className=\"mt-2 text-5xl font-bold tracking-widest\">{formatTime(timeLeft)}</div>\n            <div className=\"mt-2 text-xl font-semibold uppercase tracking-wider bg-white/20 px-4 py-1 rounded-full inline-block\">\n              {period}\n            </div>\n          </div>\n\n          {/* Team 2 Section */}\n          <div className=\"flex items-center justify-end gap-6 w-1/3\">\n            <div className=\"text-right\">\n              <h1 className=\"text-4xl font-extrabold tracking-tight truncate w-64\">{team2Name}</h1>\n              <div className=\"flex items-center justify-end gap-6 mt-2\">\n                <StatDisplay icon={<Shield className=\"w-8 h-8 text-yellow-400\" />} value={fouls2} label=\"Faltas\" />\n                <StatDisplay icon={<Timer className=\"w-8 h-8 text-green-400\" />} value={timeouts2} label=\"T. Muertos\" />\n              </div>\n            </div>\n            <Image\n              src={team2Logo || `https://avatar.vercel.sh/${team2Name}.png`}\n              alt={`${team2Name} logo`}\n              width={100}\n              height={100}\n              className=\"rounded-full bg-white/10 p-2\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n"
                        }
                    ]
                },
                {
                    "nombre": "ui",
                    "tipo": "directorio",
                    "hijos": [
                        {
                            "nombre": "card.tsx",
                            "tipo": "archivo",
                            "contenido": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"
                        },
                        {
                            "nombre": "slider.tsx",
                            "tipo": "archivo",
                            "contenido": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n"
                        },
                        {
                            "nombre": "table.tsx",
                            "tipo": "archivo",
                            "contenido": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"
                        },
                        {
                            "nombre": "alert-dialog.tsx",
                            "tipo": "archivo",
                            "contenido": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n"
                        },
                        {
                            "nombre": "form.tsx",
                            "tipo": "archivo",
                            "contenido": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"
                        },
                        {
                            "nombre": "sidebar.tsx",
                            "tipo": "archivo",
                            "contenido": "\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n"
                        },
                        {
                            "nombre": "scroll-area.tsx",
                            "tipo": "archivo",
                            "contenido": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n"
                        },
                        {
                            "nombre": "dropdown-menu.tsx",
                            "tipo": "archivo",
                            "contenido": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n"
                        },
                        {
                            "nombre": "textarea.tsx",
                            "tipo": "archivo",
                            "contenido": "import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"
                        },
                        {
                            "nombre": "toast.tsx",
                            "tipo": "archivo",
                            "contenido": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n"
                        },
                        {
                            "nombre": "skeleton.tsx",
                            "tipo": "archivo",
                            "contenido": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n"
                        },
                        {
                            "nombre": "label.tsx",
                            "tipo": "archivo",
                            "contenido": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"
                        },
                        {
                            "nombre": "tabs.tsx",
                            "tipo": "archivo",
                            "contenido": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n"
                        },
                        {
                            "nombre": "menubar.tsx",
                            "tipo": "archivo",
                            "contenido": "\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n"
                        },
                        {
                            "nombre": "chart.tsx",
                            "tipo": "archivo",
                            "contenido": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n"
                        },
                        {
                            "nombre": "carousel.tsx",
                            "tipo": "archivo",
                            "contenido": "\"use client\"\n\nimport * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n"
                        },
                        {
                            "nombre": "checkbox.tsx",
                            "tipo": "archivo",
                            "contenido": "\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n"
                        },
                        {
                            "nombre": "collapsible.tsx",
                            "tipo": "archivo",
                            "contenido": "\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n"
                        },
                        {
                            "nombre": "toaster.tsx",
                            "tipo": "archivo",
                            "contenido": "\"use client\"\n\nimport { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n"
                        },
                        {
                            "nombre": "progress.tsx",
                            "tipo": "archivo",
                            "contenido": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n"
                        },
                        {
                            "nombre": "avatar.tsx",
                            "tipo": "archivo",
                            "contenido": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n"
                        },
                        {
                            "nombre": "accordion.tsx",
                            "tipo": "archivo",
                            "contenido": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n"
                        },
                        {
                            "nombre": "alert.tsx",
                            "tipo": "archivo",
                            "contenido": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n"
                        },
                        {
                            "nombre": "dialog.tsx",
                            "tipo": "archivo",
                            "contenido": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"
                        },
                        {
                            "nombre": "switch.tsx",
                            "tipo": "archivo",
                            "contenido": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n"
                        },
                        {
                            "nombre": "select.tsx",
                            "tipo": "archivo",
                            "contenido": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n"
                        },
                        {
                            "nombre": "badge.tsx",
                            "tipo": "archivo",
                            "contenido": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"
                        },
                        {
                            "nombre": "sheet.tsx",
                            "tipo": "archivo",
                            "contenido": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n"
                        },
                        {
                            "nombre": "popover.tsx",
                            "tipo": "archivo",
                            "contenido": "\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n"
                        },
                        {
                            "nombre": "separator.tsx",
                            "tipo": "archivo",
                            "contenido": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n"
                        },
                        {
                            "nombre": "input.tsx",
                            "tipo": "archivo",
                            "contenido": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"
                        },
                        {
                            "nombre": "calendar.tsx",
                            "tipo": "archivo",
                            "contenido": "\"use client\"\n\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n"
                        },
                        {
                            "nombre": "button.tsx",
                            "tipo": "archivo",
                            "contenido": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n        accent: \"bg-accent text-accent-foreground hover:bg-accent/90\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"
                        },
                        {
                            "nombre": "radio-group.tsx",
                            "tipo": "archivo",
                            "contenido": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n"
                        },
                        {
                            "nombre": "tooltip.tsx",
                            "tipo": "archivo",
                            "contenido": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n"
                        }
                    ]
                },
                {
                    "nombre": "controles",
                    "tipo": "directorio",
                    "hijos": [
                        {
                            "nombre": "Scoreboard.tsx",
                            "tipo": "archivo",
                            "contenido": "\n'use client';\n\nimport { useGame } from '@/contexts/GameProvider';\nimport { Card, CardContent } from '@/components/ui/card';\nimport Image from 'next/image';\nimport { Shield, Timer, Flag } from 'lucide-react';\n\nconst formatTime = (seconds: number) => {\n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = seconds % 60;\n  return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`;\n};\n\nexport function Scoreboard() {\n  const { state } = useGame();\n  const { teamA, teamB, scoreA, scoreB, time, period, foulsA, foulsB, timeoutsA, timeoutsB } = state;\n\n  if (!teamA || !teamB) {\n    return null; // Or a loading skeleton\n  }\n\n  return (\n    <Card className=\"w-full shadow-lg mb-8 bg-card/80 backdrop-blur-sm border-primary/20\">\n      <CardContent className=\"p-4\">\n        <div className=\"grid grid-cols-3 items-center text-center\">\n          {/* Team A Info */}\n          <div className=\"flex flex-col items-center justify-center gap-2\">\n            <Image\n              src={teamA.logoUrl || `https://avatar.vercel.sh/${teamA.name}.png`}\n              alt={`Logo de ${teamA.name}`}\n              width={64}\n              height={64}\n              className=\"rounded-full aspect-square object-contain\"\n            />\n            <h2 className=\"text-lg font-bold text-card-foreground truncate\">{teamA.name}</h2>\n            <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                <div className=\"flex items-center gap-1\"><Shield className=\"h-4 w-4\" /> Faltas: {foulsA}</div>\n                <div className=\"flex items-center gap-1\"><Timer className=\"h-4 w-4\" /> T.M.: {timeoutsA}</div>\n            </div>\n          </div>\n\n          {/* Center Score and Time */}\n          <div className=\"flex flex-col items-center gap-2\">\n            <div className=\"text-6xl font-black tracking-tighter text-primary\">\n              {scoreA} - {scoreB}\n            </div>\n            <div className=\"font-mono text-4xl font-bold bg-accent text-accent-foreground px-4 py-1 rounded-md\">\n              {formatTime(time)}\n            </div>\n            <div className=\"flex items-center gap-2 text-sm font-semibold text-muted-foreground\">\n                <Flag className=\"h-4 w-4\" />\n                <span>Período: {period}</span>\n            </div>\n          </div>\n\n          {/* Team B Info */}\n          <div className=\"flex flex-col items-center justify-center gap-2\">\n            <Image\n              src={teamB.logoUrl || `https://avatar.vercel.sh/${teamB.name}.png`}\n              alt={`Logo de ${teamB.name}`}\n              width={64}\n              height={64}\n              className=\"rounded-full aspect-square object-contain\"\n            />\n            <h2 className=\"text-lg font-bold text-card-foreground truncate\">{teamB.name}</h2>\n            <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                <div className=\"flex items-center gap-1\"><Shield className=\"h-4 w-4\" /> Faltas: {foulsB}</div>\n                <div className=\"flex items-center gap-1\"><Timer className=\"h-4 w-4\" /> T.M.: {timeoutsB}</div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n"
                        },
                        {
                            "nombre": "GameControls.tsx",
                            "tipo": "archivo",
                            "contenido": "\n'use client';\n\nimport { TeamPanel } from './TeamPanel';\nimport { ControlsPanel } from './ControlsPanel';\nimport { useGame } from '@/contexts/GameProvider';\n\nexport function GameControls() {\n  const { state } = useGame();\n  \n  if (!state.teamA || !state.teamB) {\n      return null;\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 h-full\">\n      <TeamPanel teamId=\"A\" />\n      <ControlsPanel />\n      <TeamPanel teamId=\"B\" />\n    </div>\n  );\n}\n"
                        },
                        {
                            "nombre": "MatchListSkeleton.tsx",
                            "tipo": "archivo",
                            "contenido": "import { Skeleton } from '@/components/ui/skeleton';\nimport { Card, CardContent, CardFooter, CardHeader } from '@/components/ui/card';\n\nexport function MatchListSkeleton() {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\" aria-hidden=\"true\">\n      {Array.from({ length: 3 }).map((_, index) => (\n        <Card key={index} className=\"bg-secondary/50 transition-opacity duration-300\">\n          <CardHeader className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <Skeleton className=\"h-5 w-3/5\" />\n              <Skeleton className=\"h-5 w-1/4\" />\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-4 space-y-4\">\n            <div className=\"flex justify-around items-center\">\n              <div className=\"flex flex-col items-center gap-2 w-24\">\n                <Skeleton className=\"h-16 w-16 rounded-full\" />\n                <Skeleton className=\"h-4 w-20\" />\n              </div>\n              <Skeleton className=\"h-6 w-8\" />\n              <div className=\"flex flex-col items-center gap-2 w-24\">\n                <Skeleton className=\"h-16 w-16 rounded-full\" />\n                <Skeleton className=\"h-4 w-20\" />\n              </div>\n            </div>\n            <div className=\"space-y-2 pt-4 border-t border-border\">\n              <Skeleton className=\"h-4 w-1/2\" />\n              <Skeleton className=\"h-4 w-1/3\" />\n            </div>\n          </CardContent>\n          <CardFooter className=\"p-4 bg-card-foreground/5\">\n             <div className=\"flex gap-2 w-full justify-end\">\n                <Skeleton className=\"h-9 w-28\" />\n                <Skeleton className=\"h-9 w-28\" />\n            </div>\n          </CardFooter>\n        </Card>\n      ))}\n    </div>\n  );\n}\n"
                        },
                        {
                            "nombre": "TeamPanel.tsx",
                            "tipo": "archivo",
                            "contenido": "\n'use client';\n\nimport { useGame } from '@/contexts/GameProvider';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { JerseyButton } from './JerseyButton';\nimport type { SelectedPlayer } from '@/types';\nimport { ScrollArea } from '@/components/ui/scroll-area';\n\ninterface TeamPanelProps {\n  teamId: 'A' | 'B';\n}\n\nexport function TeamPanel({ teamId }: TeamPanelProps) {\n  const { state, dispatch } = useGame();\n  \n  const team = teamId === 'A' ? state.teamA : state.teamB;\n  const { selectedPlayer } = state;\n\n  if (!team || !team.players) return null;\n\n  const handlePlayerSelect = (playerId: number) => {\n    const payload: SelectedPlayer = { teamId, playerId };\n    dispatch({ type: 'SELECT_PLAYER', payload });\n  };\n\n  return (\n    <Card className=\"h-full flex flex-col\">\n      <CardHeader className=\"flex-shrink-0\">\n        <CardTitle className=\"text-center text-primary\">{team.name}</CardTitle>\n      </CardHeader>\n      <CardContent className=\"flex-grow p-2 overflow-y-auto\">\n        <div className=\"flex flex-wrap items-start justify-center gap-4\">\n            {team.players.map((player) => (\n              <JerseyButton\n                key={player.id}\n                jerseyNumber={player.number}\n                playerName={player.name}\n                isSelected={\n                  !!selectedPlayer &&\n                  selectedPlayer.teamId === teamId &&\n                  selectedPlayer.playerId === player.id\n                }\n                onClick={() => handlePlayerSelect(player.id)}\n              />\n            ))}\n          </div>\n      </CardContent>\n    </Card>\n  );\n}\n"
                        },
                        {
                            "nombre": "EventButtons.tsx",
                            "tipo": "archivo",
                            "contenido": "\n'use client';\n\nimport { useGame } from '@/contexts/GameProvider';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Goal, Shield, Hand, Footprints, Square } from 'lucide-react';\nimport type { GameEventType } from '@/types';\n\nexport function EventButtons() {\n  const { state, dispatch } = useGame();\n  const { selectedPlayer, teamA, teamB } = state;\n\n  const handleAddEvent = (type: GameEventType) => {\n    dispatch({ type: 'ADD_EVENT', payload: { type } });\n  };\n  \n  const getPlayerInfo = () => {\n    if (!selectedPlayer) return null;\n    const team = selectedPlayer.teamId === 'A' ? teamA : teamB;\n    const player = team?.players?.find(p => p.id === selectedPlayer.playerId);\n    return player ? `${player.name} (#${player.number})` : null;\n  }\n\n  const selectedPlayerInfo = getPlayerInfo();\n\n  return (\n    <Card className=\"w-full shadow-md\">\n      <CardHeader className=\"text-center pb-2\">\n        <CardTitle className=\"text-lg text-primary\">Registrar Evento</CardTitle>\n        <CardDescription className=\"h-5\">\n            {selectedPlayerInfo ? `Para: ${selectedPlayerInfo}` : 'Seleccione un jugador'}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex justify-center flex-wrap gap-3 pt-4\">\n        <Button \n            onClick={() => handleAddEvent('GOAL')} \n            disabled={!selectedPlayer}\n            aria-label=\"Registrar gol\"\n        >\n          <Goal className=\"mr-2 h-4 w-4\" />\n          Gol\n        </Button>\n        <Button \n            onClick={() => handleAddEvent('ASSIST')} \n            disabled={!selectedPlayer}\n            aria-label=\"Registrar asistencia\"\n            variant=\"outline\"\n        >\n          <Hand className=\"mr-2 h-4 w-4\" />\n          Asistencia\n        </Button>\n         <Button \n            onClick={() => handleAddEvent('SHOT')} \n            disabled={!selectedPlayer}\n            aria-label=\"Registrar tiro al arco\"\n            variant=\"outline\"\n        >\n          <Footprints className=\"mr-2 h-4 w-4\" />\n          Tiro al arco\n        </Button>\n        <Button \n            onClick={() => handleAddEvent('FOUL')} \n            disabled={!selectedPlayer}\n            aria-label=\"Registrar falta\"\n            variant=\"destructive\"\n            className=\"bg-orange-500 hover:bg-orange-600\"\n        >\n          <Shield className=\"mr-2 h-4 w-4\" />\n          Falta\n        </Button>\n        <Button\n            onClick={() => handleAddEvent('YELLOW_CARD')}\n            disabled={!selectedPlayer}\n            aria-label=\"Registrar tarjeta amarilla\"\n            className=\"bg-yellow-400 text-black hover:bg-yellow-500\"\n        >\n            <Square className=\"mr-2 h-4 w-4 fill-current\" />\n            Amarilla\n        </Button>\n        <Button\n            onClick={() => handleAddEvent('RED_CARD')}\n            disabled={!selectedPlayer}\n            aria-label=\"Registrar tarjeta roja\"\n            variant=\"destructive\"\n        >\n            <Square className=\"mr-2 h-4 w-4 fill-current\" />\n            Roja\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n"
                        },
                        {
                            "nombre": "ControlMatchCard.tsx",
                            "tipo": "archivo",
                            "contenido": "\n'use client';\n\nimport type { FullMatch } from '@/types';\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport Image from 'next/image';\nimport { Calendar, Clock, Edit, BarChart2, Users } from 'lucide-react';\nimport Link from 'next/link';\nimport { useEffect, useState } from 'react';\n\ninterface ControlMatchCardProps {\n  match: FullMatch;\n}\n\nconst statusVariantMap: Record<FullMatch['status'], 'default' | 'destructive' | 'secondary'> = {\n  SCHEDULED: 'secondary',\n  LIVE: 'destructive',\n  FINISHED: 'default',\n};\n\nconst statusTextMap: Record<FullMatch['status'], string> = {\n    SCHEDULED: 'Programado',\n    LIVE: 'En Vivo',\n    FINISHED: 'Finalizado',\n};\n\nexport function ControlMatchCard({ match }: ControlMatchCardProps) {\n  const [formattedDate, setFormattedDate] = useState('');\n  const [formattedTime, setFormattedTime] = useState('');\n\n  useEffect(() => {\n    const scheduledDateTime = new Date(match.scheduledTime);\n    setFormattedDate(scheduledDateTime.toLocaleDateString('es-UY', {\n      day: 'numeric',\n      month: 'long',\n      year: 'numeric'\n    }));\n    setFormattedTime(scheduledDateTime.toLocaleTimeString('es-UY', {\n      hour: '2-digit',\n      minute: '2-digit',\n    }));\n  }, [match.scheduledTime]);\n\n\n  const renderActions = () => {\n    const commonButtonClass = \"w-full sm:w-auto\";\n    switch (match.status) {\n      case 'SCHEDULED':\n        return (\n          <>\n            <Button variant=\"outline\" size=\"sm\" className={commonButtonClass} disabled>\n              <Users className=\"mr-2 h-4 w-4\" />\n              Convocar\n            </Button>\n            <Button variant=\"accent\" size=\"sm\" asChild className={commonButtonClass}>\n              <Link href={`/controles/${match.id}`}>\n                <Edit className=\"mr-2 h-4 w-4\" />\n                Controlar\n              </Link>\n            </Button>\n          </>\n        );\n      case 'LIVE':\n        return (\n          <Button variant=\"accent\" size=\"sm\" className={`${commonButtonClass} animate-pulse`} asChild>\n            <Link href={`/controles/${match.id}`}>\n              <Edit className=\"mr-2 h-4 w-4\" />\n              Controlar (En Vivo)\n            </Link>\n          </Button>\n        );\n      case 'FINISHED':\n        return (\n          <Button variant=\"outline\" size=\"sm\" asChild className={commonButtonClass}>\n            <Link href={`/partidos/${match.id}/estadisticas`}>\n              <BarChart2 className=\"mr-2 h-4 w-4\" />\n              Estadísticas\n            </Link>\n          </Button>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Card className=\"flex flex-col overflow-hidden shadow-lg transition-transform duration-300 hover:scale-[1.02] hover:shadow-primary/20 bg-card\">\n      <CardHeader className=\"p-4 bg-card-foreground/5\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-base font-bold truncate text-card-foreground\">\n            {match.teamA.name} vs {match.teamB.name}\n          </CardTitle>\n          <Badge variant={statusVariantMap[match.status]}>{statusTextMap[match.status]}</Badge>\n        </div>\n      </CardHeader>\n      <CardContent className=\"flex-grow p-4 space-y-4\">\n        <div className=\"flex justify-around items-center\">\n          <div className=\"flex flex-col items-center gap-2 text-center w-24\">\n            <Image\n              src={match.teamA.logoUrl || `https://avatar.vercel.sh/${match.teamA.name}.png`}\n              alt={`Logo de ${match.teamA.name}`}\n              width={64}\n              height={64}\n              className=\"rounded-full aspect-square object-contain\"\n            />\n            <span className=\"font-semibold text-sm truncate w-full\">{match.teamA.name}</span>\n          </div>\n          <span className=\"text-xl font-bold text-muted-foreground\">VS</span>\n          <div className=\"flex flex-col items-center gap-2 text-center w-24\">\n            <Image\n              src={match.teamB.logoUrl || `https://avatar.vercel.sh/${match.teamB.name}.png`}\n              alt={`Logo de ${match.teamB.name}`}\n              width={64}\n              height={64}\n              className=\"rounded-full aspect-square object-contain\"\n            />\n            <span className=\"font-semibold text-sm truncate w-full\">{match.teamB.name}</span>\n          </div>\n        </div>\n         <div className=\"text-sm text-muted-foreground flex flex-col space-y-2 pt-4 border-t border-border\">\n          <div className=\"flex items-center gap-2\">\n            <Calendar className=\"h-4 w-4\" />\n            <span>{formattedDate}</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Clock className=\"h-4 w-4\" />\n            <span>{formattedTime}</span>\n          </div>\n        </div>\n      </CardContent>\n      <CardFooter className=\"p-4 bg-card-foreground/5\" aria-label={`Acciones para el partido entre ${match.teamA.name} y ${match.teamB.name}`}>\n        <div className=\"flex flex-wrap gap-2 w-full justify-end\">\n            {renderActions()}\n        </div>\n      </CardFooter>\n    </Card>\n  );\n}\n"
                        },
                        {
                            "nombre": "ControlsPanel.tsx",
                            "tipo": "archivo",
                            "contenido": "\n'use client';\n\nimport { useGame } from '@/contexts/GameProvider';\nimport { Card, CardHeader, CardTitle, CardContent, CardFooter } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Play, Pause, RotateCcw, Flag, Save, CheckCircle, Minus, Plus, Timer } from 'lucide-react';\n\nconst formatTime = (seconds: number) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`;\n};\n\nexport function ControlsPanel() {\n  const { state, dispatch } = useGame();\n\n  const handlePeriodChange = (delta: number) => {\n    const newPeriod = Math.max(1, state.period + delta);\n    dispatch({ type: 'SET_PERIOD', payload: newPeriod });\n  };\n  \n  const handleTimeout = (teamId: 'A' | 'B') => {\n      dispatch({ type: 'ADD_EVENT', payload: { type: 'TIMEOUT', teamId }})\n  }\n\n  return (\n    <Card className=\"w-full shadow-md flex flex-col h-full\">\n      <CardHeader className=\"flex-shrink-0\">\n        <CardTitle className=\"text-center text-primary\">Controles del Juego</CardTitle>\n      </CardHeader>\n      <CardContent className=\"flex-grow flex flex-col items-center justify-around gap-4 pt-6 overflow-y-auto\">\n        <div className=\"text-center\">\n            <p className=\"text-sm text-muted-foreground\">Tiempo de Juego</p>\n            <p className=\"text-6xl font-mono font-bold text-foreground\" aria-live=\"polite\">{formatTime(state.time)}</p>\n        </div>\n        <div className=\"flex items-center gap-4\">\n            <Button size=\"lg\" onClick={() => dispatch({ type: 'TOGGLE_TIMER' })} aria-label={state.isRunning ? \"Pausar tiempo\" : \"Iniciar tiempo\"}>\n                {state.isRunning ? <Pause className=\"mr-2 h-5 w-5\"/> : <Play className=\"mr-2 h-5 w-5\"/>}\n                {state.isRunning ? 'Pausar' : 'Iniciar'}\n            </Button>\n            <Button size=\"lg\" variant=\"outline\" onClick={() => dispatch({ type: 'RESET_TIMER' })} aria-label=\"Reiniciar tiempo\">\n                <RotateCcw className=\"mr-2 h-5 w-5\"/>\n                Reiniciar\n            </Button>\n        </div>\n        <div className=\"flex items-center gap-2\">\n            <Button variant=\"ghost\" size=\"icon\" onClick={() => handlePeriodChange(-1)} aria-label=\"Disminuir período\"><Minus className=\"h-4 w-4\" /></Button>\n            <div className=\"flex items-center gap-2\">\n                <Flag className=\"h-5 w-5 text-muted-foreground\" />\n                <span className=\"font-semibold text-lg\">Período: {state.period}</span>\n            </div>\n            <Button variant=\"ghost\" size=\"icon\" onClick={() => handlePeriodChange(1)} aria-label=\"Aumentar período\"><Plus className=\"h-4 w-4\" /></Button>\n        </div>\n        <div className=\"flex w-full justify-around pt-4 border-t\">\n            <div className=\"text-center\">\n                <p className=\"text-sm font-semibold\">{state.teamA?.name}</p>\n                <Button size=\"sm\" variant=\"outline\" className=\"mt-1\" disabled={state.timeoutsA <= 0} onClick={() => handleTimeout('A')}>\n                    <Timer className=\"mr-2 h-4 w-4\" /> T. Muerto ({state.timeoutsA})\n                </Button>\n            </div>\n             <div className=\"text-center\">\n                <p className=\"text-sm font-semibold\">{state.teamB?.name}</p>\n                 <Button size=\"sm\" variant=\"outline\" className=\"mt-1\" disabled={state.timeoutsB <= 0} onClick={() => handleTimeout('B')}>\n                    <Timer className=\"mr-2 h-4 w-4\" /> T. Muerto ({state.timeoutsB})\n                </Button>\n            </div>\n        </div>\n      </CardContent>\n      <CardFooter className=\"grid grid-cols-2 gap-4 p-4 bg-card-foreground/5 flex-shrink-0\">\n        <Button variant=\"accent\" onClick={() => console.log('Guardando cambios...', state)}>\n            <Save className=\"mr-2 h-4 w-4\" />\n            Guardar Cambios\n        </Button>\n        <Button variant=\"destructive\" onClick={() => console.log('Finalizando partido...')}>\n            <CheckCircle className=\"mr-2 h-4 w-4\" />\n            Finalizar Partido\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n"
                        },
                        {
                            "nombre": "JerseyButton.tsx",
                            "tipo": "archivo",
                            "contenido": "\n'use client';\n\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\n\ninterface JerseyButtonProps {\n  jerseyNumber: number;\n  playerName: string;\n  isSelected: boolean;\n  onClick: () => void;\n}\n\nexport function JerseyButton({ jerseyNumber, playerName, isSelected, onClick }: JerseyButtonProps) {\n  return (\n    <div className=\"flex flex-col items-center\">\n      <Button\n        variant={isSelected ? 'accent' : 'outline'}\n        className={cn(\n          'h-14 w-14 rounded-full text-lg font-bold flex flex-col items-center justify-center p-0 transition-all duration-200',\n          isSelected && 'ring-2 ring-offset-2 ring-accent'\n        )}\n        onClick={onClick}\n        aria-label={`Seleccionar jugador ${playerName}, número ${jerseyNumber}`}\n        aria-pressed={isSelected}\n      >\n        <span className=\"font-bold text-xl\">{jerseyNumber}</span>\n      </Button>\n      <span className=\"mt-2 text-xs font-medium text-center truncate w-20\">{playerName}</span>\n    </div>\n  );\n}\n"
                        }
                    ]
                },
                {
                    "nombre": "hero.tsx",
                    "tipo": "archivo",
                    "contenido": "import Link from 'next/link';\nimport { Button } from '@/components/ui/button';\nimport Image from 'next/image';\n\nexport function Hero() {\n  return (\n    <section\n      id=\"hero\"\n      className=\"relative py-20 md:py-32 bg-[hsl(var(--background))] text-center overflow-hidden\"\n      aria-label=\"Sección principal de Liga Canelones Futsal\"\n    >\n      <div className=\"absolute inset-0 bg-grid-pattern opacity-10\" style={{ maskImage: 'linear-gradient(to bottom, rgba(0,0,0,1), rgba(0,0,0,0))' }} />\n      <div className=\"container relative z-10\">\n        <Image \n          src=\"/logofu.svg\" \n          alt=\"Liga Futsal Logo\"\n          width={64}\n          height={64}\n          className=\"mx-auto mb-6 animate-bounce-slow\" \n          aria-label=\"Icono de pelota de futsal\" \n          role=\"img\"\n        />\n        <h1 className=\"text-4xl sm:text-5xl md:text-6xl font-bold text-primary animate-fade-in [animation-delay:0.1s]\">\n          ¡Vive la Pasión del Futsal en Canelones!\n        </h1>\n        <p className=\"text-lg md:text-xl text-muted-foreground max-w-2xl mx-auto mt-4 animate-fade-in [animation-delay:0.2s]\">\n          Sigue todos los partidos, noticias y estadísticas de la liga regional.\n        </p>\n        <div className=\"mt-8 flex flex-wrap justify-center gap-4 animate-fade-in [animation-delay:0.3s]\">\n          <Button size=\"lg\" asChild>\n            <Link href=\"#news-summary\" scroll={true}>Ver Noticias</Link>\n          </Button>\n          <Button size=\"lg\" variant=\"outline\" className=\"border-accent text-accent hover:bg-accent/10 hover:text-accent\" asChild>\n            <Link href=\"#teams\">Explorar Equipos</Link>\n          </Button>\n        </div>\n      </div>\n    </section>\n  );\n}\n"
                },
                {
                    "nombre": "partidos",
                    "tipo": "directorio",
                    "hijos": [
                        {
                            "nombre": "estadisticas",
                            "tipo": "directorio",
                            "hijos": [
                                {
                                    "nombre": "StatCard.tsx",
                                    "tipo": "archivo",
                                    "contenido": "\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport type { ReactNode } from 'react';\n\ninterface StatCardProps {\n  title: string;\n  value: ReactNode;\n  icon: ReactNode;\n  description?: string;\n}\n\nexport function StatCard({ title, value, icon, description }: StatCardProps) {\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\n        <div className=\"text-muted-foreground\">{icon}</div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\">{value}</div>\n        {description && (\n            <p className=\"text-xs text-muted-foreground\">{description}</p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n"
                                },
                                {
                                    "nombre": "ScoreSummary.tsx",
                                    "tipo": "archivo",
                                    "contenido": "\nimport Image from 'next/image';\nimport { Card, CardContent } from '@/components/ui/card';\nimport type { MatchStats } from '@/types';\n\ninterface ScoreSummaryProps {\n  match: MatchStats;\n}\n\nexport function ScoreSummary({ match }: ScoreSummaryProps) {\n  const { teamA, teamB, scoreA, scoreB, stats } = match;\n\n  const totalFoulsA = stats.foulsByPlayer.filter(p => teamA.players.some(player => player.id === p.player.id)).reduce((sum, p) => sum + p.count, 0);\n  const totalFoulsB = stats.foulsByPlayer.filter(p => teamB.players.some(player => player.id === p.player.id)).reduce((sum, p) => sum + p.count, 0);\n\n\n  return (\n    <Card className=\"w-full shadow-lg bg-card/80 backdrop-blur-sm border-primary/20\">\n      <CardContent className=\"p-4 md:p-6\">\n        <div className=\"grid grid-cols-[1fr_auto_1fr] items-center gap-2 md:gap-4 text-center\">\n          {/* Team A */}\n          <div className=\"flex flex-col md:flex-row items-center justify-end gap-2 md:gap-4\">\n            <h2 className=\"text-lg md:text-2xl font-bold text-card-foreground text-right\">{teamA.name}</h2>\n            <Image\n              src={teamA.logoUrl || `https://avatar.vercel.sh/${teamA.name}.png`}\n              alt={`Logo de ${teamA.name}`}\n              width={64}\n              height={64}\n              className=\"w-12 h-12 md:w-20 md:h-20 rounded-full aspect-square object-contain\"\n            />\n          </div>\n\n          {/* Score */}\n          <div className=\"flex flex-col\">\n            <div className=\"text-4xl md:text-6xl font-black tracking-tighter text-primary\">\n              {scoreA} - {scoreB}\n            </div>\n            <div className=\"text-sm md:text-lg font-semibold text-muted-foreground tracking-normal mt-1\">FINAL</div>\n          </div>\n\n          {/* Team B */}\n          <div className=\"flex flex-col-reverse md:flex-row items-center justify-start gap-2 md:gap-4\">\n             <Image\n              src={teamB.logoUrl || `https://avatar.vercel.sh/${teamB.name}.png`}\n              alt={`Logo de ${teamB.name}`}\n              width={64}\n              height={64}\n              className=\"w-12 h-12 md:w-20 md:h-20 rounded-full aspect-square object-contain\"\n            />\n            <h2 className=\"text-lg md:text-2xl font-bold text-card-foreground text-left\">{teamB.name}</h2>\n          </div>\n        </div>\n\n        <div className=\"mt-6 grid grid-cols-2 gap-4 text-sm text-center border-t pt-4\">\n            <div>\n                <p className=\"font-semibold\">Faltas {teamA.name}</p>\n                <p className=\"text-muted-foreground\">{totalFoulsA}</p>\n            </div>\n             <div>\n                <p className=\"font-semibold\">Faltas {teamB.name}</p>\n                <p className=\"text-muted-foreground\">{totalFoulsB}</p>\n            </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n"
                                },
                                {
                                    "nombre": "SummaryHeader.tsx",
                                    "tipo": "archivo",
                                    "contenido": "\nimport { Calendar, Users } from 'lucide-react';\nimport type { MatchStats } from '@/types';\n\ninterface SummaryHeaderProps {\n  match: MatchStats;\n}\n\nexport function SummaryHeader({ match }: SummaryHeaderProps) {\n  const matchDate = new Date(match.scheduledTime).toLocaleDateString('es-UY', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  });\n\n  return (\n    <div className=\"text-center\">\n      <h1 className=\"text-3xl font-bold tracking-tight text-primary sm:text-4xl lg:text-5xl\">\n        Resumen del Partido\n      </h1>\n      <p className=\"mt-3 text-lg text-muted-foreground sm:text-xl\">\n        {match.teamA.name} vs. {match.teamB.name}\n      </p>\n      <div className=\"mt-4 flex flex-col sm:flex-row justify-center items-center gap-4 sm:gap-6 text-sm text-muted-foreground\">\n        <div className=\"flex items-center gap-2\">\n          <Calendar className=\"h-4 w-4\" />\n          <span>{matchDate}</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n            <Users className=\"h-4 w-4\" />\n            <span>Liga Senior de Futsal</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n"
                                },
                                {
                                    "nombre": "EventsList.tsx",
                                    "tipo": "archivo",
                                    "contenido": "\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { FutsalBallIcon } from '@/components/icons';\nimport { Shield } from 'lucide-react';\nimport type { GameEvent } from '@/types';\n\ninterface EventsListProps {\n  title: string;\n  events: GameEvent[];\n  eventType: 'GOAL' | 'FOUL';\n}\n\nconst eventIconMap = {\n  GOAL: <FutsalBallIcon className=\"w-5 h-5 text-primary\" />,\n  FOUL: <Shield className=\"w-5 h-5 text-yellow-500\" />,\n};\n\nconst formatTimeFromTotalSeconds = (totalSeconds: number) => {\n    // Futsal match is 20 min halves (1200s). We'll map the timestamp to this.\n    // This is a simplification. A real implementation would know the period.\n    const gameDuration = 2400; // 40 mins total\n    const percentOfGame = totalSeconds / gameDuration;\n    const gameTimeSeconds = Math.floor(percentOfGame * 2400);\n    const minute = Math.floor(gameTimeSeconds / 60);\n    return `${minute}'`;\n}\n\nexport function EventsList({ title, events, eventType }: EventsListProps) {\n  const filteredEvents = events\n    .filter((event) => event.type === eventType)\n    .sort((a, b) => a.timestamp - b.timestamp);\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>{title}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        {filteredEvents.length > 0 ? (\n          <ul className=\"space-y-4\">\n            {filteredEvents.map((event) => (\n              <li key={event.id} className=\"flex items-center gap-4 text-sm\">\n                <div className=\"font-mono font-semibold w-8\">{formatTimeFromTotalSeconds(event.timestamp)}</div>\n                <div className=\"flex-shrink-0\">{eventIconMap[eventType]}</div>\n                <div className=\"flex-grow\">\n                  <p className=\"font-semibold\">{event.playerName}</p>\n                  <p className=\"text-xs text-muted-foreground\">{event.teamName}</p>\n                </div>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p className=\"text-sm text-muted-foreground text-center py-4\">\n            No hay eventos de este tipo.\n          </p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "nombre": "types",
            "tipo": "directorio",
            "hijos": [
                {
                    "nombre": "index.ts",
                    "tipo": "archivo",
                    "contenido": "\n\n\nexport type MatchStatus = 'SCHEDULED' | 'LIVE' | 'FINISHED';\n\nexport interface Player {\n  id: number;\n  name: string;\n  number: number;\n  position: 'Goalkeeper' | 'Defender' | 'Winger' | 'Pivot';\n}\n\nexport interface Team {\n  id: number;\n  name: string;\n  logoUrl?: string;\n  players: Player[];\n}\n\nexport type GameEventType = 'GOAL' | 'ASSIST' | 'FOUL' | 'SHOT' | 'YELLOW_CARD' | 'RED_CARD' | 'TIMEOUT';\n\nexport interface GameEvent {\n  id: string;\n  type: GameEventType;\n  teamId: 'A' | 'B';\n  playerId: number;\n  playerName: string;\n  teamName: string;\n  timestamp: number; // Time in seconds when event occurred\n}\n\nexport interface FullMatch {\n  id: string;\n  scheduledTime: string; \n  status: MatchStatus;\n  teamA: Team;\n  teamB: Team;\n  scoreA: number;\n  scoreB: number;\n  events?: GameEvent[];\n}\n\nexport type PlayerStat = {\n  player: Player;\n  count: number;\n};\n\nexport interface MatchStats extends FullMatch {\n  stats: {\n    topScorers: PlayerStat[];\n    assistsLeaders: PlayerStat[];\n    foulsByPlayer: PlayerStat[];\n    shotsByPlayer: PlayerStat[];\n  };\n}\n\n\nexport type SelectedPlayer = {\n  teamId: 'A' | 'B';\n  playerId: number;\n} | null;\n\nexport interface GameState {\n  matchId: string | null;\n  status: MatchStatus;\n  teamA: Team | null;\n  teamB: Team | null;\n  scoreA: number;\n  scoreB: number;\n  foulsA: number;\n  foulsB: number;\n  timeoutsA: number;\n  timeoutsB: number;\n  period: number;\n  time: number; // in seconds\n  isRunning: boolean;\n  events: GameEvent[];\n  selectedPlayer: SelectedPlayer;\n}\n"
                }
            ]
        },
        {
            "nombre": "hooks",
            "tipo": "directorio",
            "hijos": [
                {
                    "nombre": "use-toast.ts",
                    "tipo": "archivo",
                    "contenido": "\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n"
                },
                {
                    "nombre": "useLiveMatchState.tsx",
                    "tipo": "archivo",
                    "contenido": "\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport type { GameState, FullMatch } from '@/types';\n\nexport function useLiveMatchState(matchId: string, initialMatchData: FullMatch | null): GameState | null {\n  const [liveState, setLiveState] = useState<GameState | null>(null);\n\n  const getInitialState = (): GameState | null => {\n    try {\n      if (typeof window !== 'undefined') {\n        const savedState = localStorage.getItem(`futsal-match-state-${matchId}`);\n        if (savedState) {\n            return JSON.parse(savedState) as GameState;\n        }\n      }\n    } catch (e) {\n        console.error(\"Could not parse saved state\", e);\n    }\n    \n    if (initialMatchData) {\n        return {\n          matchId: initialMatchData.id,\n          status: initialMatchData.status,\n          teamA: initialMatchData.teamA,\n          teamB: initialMatchData.teamB,\n          scoreA: initialMatchData.scoreA,\n          scoreB: initialMatchData.scoreB,\n          foulsA: 0,\n          foulsB: 0,\n          timeoutsA: 1,\n          timeoutsB: 1,\n          period: 1,\n          time: 1200,\n          isRunning: false,\n          events: initialMatchData.events || [],\n          selectedPlayer: null,\n        }\n    }\n    return null;\n  }\n  \n  // Set initial state from localStorage or props\n  useEffect(() => {\n    setLiveState(getInitialState());\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [matchId, initialMatchData]);\n\n\n  useEffect(() => {\n    if (typeof window === 'undefined' || !matchId) {\n      return;\n    }\n\n    const handleStorageChange = (event: StorageEvent) => {\n      if (event.key === `futsal-match-state-${matchId}` && event.newValue) {\n        try {\n          const newState = JSON.parse(event.newValue) as GameState;\n          setLiveState(newState);\n        } catch (error) {\n          console.error(\"Failed to parse live state update from localStorage\", error);\n        }\n      }\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, [matchId]);\n\n  return liveState;\n}\n"
                },
                {
                    "nombre": "use-mobile.tsx",
                    "tipo": "archivo",
                    "contenido": "import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n"
                }
            ]
        },
        {
            "nombre": "lib",
            "tipo": "directorio",
            "hijos": [
                {
                    "nombre": "utils.ts",
                    "tipo": "archivo",
                    "contenido": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"
                }
            ]
        },
        {
            "nombre": "contexts",
            "tipo": "directorio",
            "hijos": [
                {
                    "nombre": "GameProvider.tsx",
                    "tipo": "archivo",
                    "contenido": "\n'use client';\n\nimport type { GameState, FullMatch, GameEvent, SelectedPlayer, GameEventType, MatchStatus } from '@/types';\nimport React, { createContext, useContext, useReducer, useEffect, ReactNode } from 'react';\n\ntype GameAction =\n  | { type: 'LOAD_MATCH'; payload: { match: FullMatch; state: GameState | null } }\n  | { type: 'UPDATE_SCORE'; payload: { team: 'A' | 'B'; delta: number } }\n  | { type: 'UPDATE_FOULS'; payload: { team: 'A' | 'B'; delta: number } }\n  | { type: 'UPDATE_TIMEOUTS'; payload: { team: 'A' | 'B'; delta: number } }\n  | { type: 'SET_PERIOD'; payload: number }\n  | { type: 'SET_STATUS'; payload: MatchStatus }\n  | { type: 'TOGGLE_TIMER' }\n  | { type: 'RESET_TIMER' }\n  | { type: 'TICK' }\n  | { type: 'SELECT_PLAYER'; payload: SelectedPlayer }\n  | { type: 'ADD_EVENT'; payload: { type: GameEventType; teamId?: 'A' | 'B' } };\n\nconst initialState: GameState = {\n  matchId: null,\n  status: 'SCHEDULED',\n  teamA: null,\n  teamB: null,\n  scoreA: 0,\n  scoreB: 0,\n  foulsA: 0,\n  foulsB: 0,\n  timeoutsA: 1,\n  timeoutsB: 1,\n  period: 1,\n  time: 1200,\n  isRunning: false,\n  events: [],\n  selectedPlayer: null,\n};\n\nconst gameReducer = (state: GameState, action: GameAction): GameState => {\n  switch (action.type) {\n    case 'LOAD_MATCH':\n      return action.payload.state || {\n        ...initialState,\n        matchId: action.payload.match.id,\n        status: action.payload.match.status,\n        teamA: action.payload.match.teamA,\n        teamB: action.payload.match.teamB,\n        scoreA: action.payload.match.scoreA,\n        scoreB: action.payload.match.scoreB,\n        events: action.payload.match.events || [],\n      };\n    case 'UPDATE_SCORE':\n      if (action.payload.team === 'A') {\n        return { ...state, scoreA: Math.max(0, state.scoreA + action.payload.delta) };\n      }\n      return { ...state, scoreB: Math.max(0, state.scoreB + action.payload.delta) };\n    case 'UPDATE_FOULS':\n      if (action.payload.team === 'A') {\n        return { ...state, foulsA: Math.max(0, state.foulsA + action.payload.delta) };\n      }\n      return { ...state, foulsB: Math.max(0, state.foulsB + action.payload.delta) };\n    case 'UPDATE_TIMEOUTS':\n       if (action.payload.team === 'A') {\n        return { ...state, timeoutsA: Math.max(0, state.timeoutsA + action.payload.delta) };\n      }\n      return { ...state, timeoutsB: Math.max(0, state.timeoutsB + action.payload.delta) };\n    case 'SET_PERIOD':\n      return { ...state, period: action.payload, time: initialState.time, isRunning: false };\n    case 'SET_STATUS':\n        return { ...state, status: action.payload };\n    case 'TOGGLE_TIMER':\n      if (state.status === 'SCHEDULED' && !state.isRunning) {\n        return { ...state, isRunning: true, status: 'LIVE' };\n      }\n      return { ...state, isRunning: !state.isRunning };\n    case 'RESET_TIMER':\n      return { ...state, time: initialState.time, isRunning: false };\n    case 'TICK':\n      if (state.isRunning && state.time > 0) {\n        return { ...state, time: state.time - 1 };\n      }\n       if (state.isRunning && state.time === 0) {\n        return { ...state, isRunning: false };\n      }\n      return state;\n    case 'SELECT_PLAYER':\n      if (state.selectedPlayer?.playerId === action.payload?.playerId && state.selectedPlayer?.teamId === action.payload?.teamId) {\n          return { ...state, selectedPlayer: null };\n      }\n      return { ...state, selectedPlayer: action.payload };\n    case 'ADD_EVENT': {\n      let teamId = state.selectedPlayer?.teamId;\n      let playerId = state.selectedPlayer?.playerId;\n\n      if (action.payload.type === 'TIMEOUT') {\n        if (!action.payload.teamId) return state;\n        teamId = action.payload.teamId;\n        playerId = -1; // System event, no specific player\n      }\n\n      if (!teamId) return state;\n      \n      const team = teamId === 'A' ? state.teamA : state.teamB;\n      const player = team?.players?.find(p => p.id === playerId);\n\n      if (!team || (playerId !== -1 && !player)) return state;\n\n      const newEvent: GameEvent = {\n          id: `${Date.now()}-${Math.random()}`,\n          type: action.payload.type,\n          teamId,\n          playerId: playerId!,\n          playerName: player?.name || 'Equipo',\n          teamName: team.name,\n          timestamp: state.time,\n      };\n      \n      const newState = { ...state, events: [...state.events, newEvent] };\n\n      if (action.payload.type === 'GOAL') {\n          return gameReducer(newState, { type: 'UPDATE_SCORE', payload: { team: teamId, delta: 1 } });\n      }\n      if (action.payload.type === 'FOUL') {\n          return gameReducer(newState, { type: 'UPDATE_FOULS', payload: { team: teamId, delta: 1 } });\n      }\n       if (action.payload.type === 'TIMEOUT') {\n          return gameReducer(newState, { type: 'UPDATE_TIMEOUTS', payload: { team: teamId, delta: -1 } });\n      }\n\n      return newState;\n    }\n    default:\n      return state;\n  }\n};\n\nconst GameContext = createContext<{ state: GameState; dispatch: React.Dispatch<GameAction> } | undefined>(undefined);\n\nexport const GameProvider = ({ children, match }: { children: ReactNode, match: FullMatch }) => {\n  const getInitialState = () => {\n    try {\n      if (typeof window !== 'undefined') {\n        const savedState = localStorage.getItem(`futsal-match-state-${match.id}`);\n        return savedState ? JSON.parse(savedState) : null;\n      }\n    } catch (error) {\n      console.error(\"Failed to read state from localStorage\", error);\n    }\n    return null;\n  };\n\n  const [state, dispatch] = useReducer(gameReducer, initialState);\n\n  useEffect(() => {\n    dispatch({ type: 'LOAD_MATCH', payload: { match, state: getInitialState() } });\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [match.id]);\n  \n  useEffect(() => {\n    if (state.matchId && typeof window !== 'undefined') {\n      try {\n        localStorage.setItem(`futsal-match-state-${state.matchId}`, JSON.stringify(state));\n      } catch (error) {\n        console.error(\"Failed to save state to localStorage\", error);\n      }\n    }\n  }, [state]);\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout | undefined;\n    if (state.isRunning && state.time > 0) {\n      timer = setInterval(() => {\n        dispatch({ type: 'TICK' });\n      }, 1000);\n    }\n    return () => {\n      if (timer) {\n        clearInterval(timer)\n      }\n    };\n  }, [state.isRunning, state.time]);\n\n  return (\n    <GameContext.Provider value={{ state, dispatch }}>\n      {children}\n    </GameContext.Provider>\n  );\n};\n\nexport const useGame = () => {\n  const context = useContext(GameContext);\n  if (context === undefined) {\n    throw new Error('useGame must be used within a GameProvider');\n  }\n  return context;\n};\n"
                }
            ]
        },
        {
            "nombre": "ai",
            "tipo": "directorio",
            "hijos": [
                {
                    "nombre": "flows",
                    "tipo": "directorio",
                    "hijos": [
                        {
                            "nombre": "summarize-futsal-news.ts",
                            "tipo": "archivo",
                            "contenido": "// SummarizeFutsalNews Flow\n'use server';\n/**\n * @fileOverview A flow that summarizes a futsal news article from a given URL.\n *\n * - summarizeFutsalNews - A function that summarizes a futsal news article.\n * - SummarizeFutsalNewsInput - The input type for the summarizeFutsalNews function.\n * - SummarizeFutsalNewsOutput - The return type for the summarizeFutsalNews function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst SummarizeFutsalNewsInputSchema = z.object({\n  url: z.string().url().describe('The URL of the futsal news article to summarize.'),\n});\nexport type SummarizeFutsalNewsInput = z.infer<typeof SummarizeFutsalNewsInputSchema>;\n\nconst SummarizeFutsalNewsOutputSchema = z.object({\n  summary: z.string().describe('A short summary of the futsal news article.'),\n});\nexport type SummarizeFutsalNewsOutput = z.infer<typeof SummarizeFutsalNewsOutputSchema>;\n\nexport async function summarizeFutsalNews(input: SummarizeFutsalNewsInput): Promise<SummarizeFutsalNewsOutput> {\n  return summarizeFutsalNewsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'summarizeFutsalNewsPrompt',\n  input: {schema: SummarizeFutsalNewsInputSchema},\n  output: {schema: SummarizeFutsalNewsOutputSchema},\n  prompt: `You are an expert futsal news summarizer.  Summarize the article at the following URL in a concise manner:\\n\\n{{{url}}}`,  \n});\n\nconst summarizeFutsalNewsFlow = ai.defineFlow(\n  {\n    name: 'summarizeFutsalNewsFlow',\n    inputSchema: SummarizeFutsalNewsInputSchema,\n    outputSchema: SummarizeFutsalNewsOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"
                        }
                    ]
                },
                {
                    "nombre": "genkit.ts",
                    "tipo": "archivo",
                    "contenido": "import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n"
                },
                {
                    "nombre": "dev.ts",
                    "tipo": "archivo",
                    "contenido": "import { config } from 'dotenv';\nconfig();\n\nimport '@/ai/flows/summarize-futsal-news.ts';"
                }
            ]
        },
        {
            "nombre": "app",
            "tipo": "directorio",
            "hijos": [
                {
                    "nombre": "globals.css",
                    "tipo": "archivo",
                    "contenido": "@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 345 20% 95%; /* Borgoña desaturado #F2E0E5 */\n    --foreground: 0 0% 20%;\n    --card: 345 50% 95%;\n    --card-foreground: 0 0% 3.9%;\n    --popover: 345 50% 95%;\n    --popover-foreground: 0 0% 3.9%;\n    --primary: 345 100% 25.1%; /* Borgoña #800020 */\n    --primary-foreground: 0 0% 98%;\n    --secondary: 345 50% 97%;\n    --secondary-foreground: 345 100% 25.1%;\n    --muted: 345 50% 88.2%;\n    --muted-foreground: 0 0% 45.1%;\n    --accent: 240 64% 27%; /* Azul Marino #191970 */\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 345 50% 85.2%;\n    --input: 345 50% 85.2%;\n    --ring: 240 64.3% 26.5%;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    --radius: 0.5rem;\n    --header-height: 4rem;\n    --sidebar-background: 0 0% 98%;\n    --sidebar-foreground: 240 5.3% 26.1%;\n    --sidebar-primary: 240 5.9% 10%;\n    --sidebar-primary-foreground: 0 0% 98%;\n    --sidebar-accent: 240 4.8% 95.9%;\n    --sidebar-accent-foreground: 240 5.9% 10%;\n    --sidebar-border: 220 13% 91%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n  .dark {\n    --background: 345 10% 10%;\n    --foreground: 0 0% 98%;\n    --card: 345 10% 12%;\n    --card-foreground: 0 0% 98%;\n    --popover: 345 10% 12%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 345 90% 70%;\n    --primary-foreground: 345 100% 25.1%;\n    --secondary: 345 10% 15%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 345 10% 15%;\n    --muted-foreground: 0 0% 63.9%;\n    --accent: 240 50% 70%;\n    --accent-foreground: 240 64.3% 26.5%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 345 10% 20%;\n    --input: 345 10% 20%;\n    --ring: 240 50% 70%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 224.3 76.3% 48%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    font-family: 'Roboto', sans-serif;\n    @apply bg-background text-foreground;\n  }\n  html,\n  body,\n  #__next {\n    height: 100%;\n  }\n}\n\n@layer utilities {\n  .bg-grid-pattern {\n    background-image: linear-gradient(to right, hsl(0 0% 90%) 1px, transparent 1px),\n                      linear-gradient(to bottom, hsl(0 0% 90%) 1px, transparent 1px);\n    background-size: 20px 20px;\n  }\n\n  .animate-fade-in {\n    animation: fadeIn 0.8s ease-out forwards;\n  }\n\n  .animate-bounce-slow {\n    animation: bounceSlow 3s ease-in-out infinite;\n  }\n\n  @keyframes fadeIn {\n    from {\n      opacity: 0;\n      transform: translateY(-10px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  @keyframes bounceSlow {\n    0%,\n    100% {\n      transform: translateY(0);\n    }\n    50% {\n      transform: translateY(-8px);\n    }\n  }\n}\n"
                },
                {
                    "nombre": "page.tsx",
                    "tipo": "archivo",
                    "contenido": "import { Header } from '@/components/layout/header';\nimport { Footer } from '@/components/layout/footer';\nimport { Hero } from '@/components/hero';\nimport { LiveMatchesBanner } from '@/components/landing/LiveMatchesBanner';\nimport { FinishedMatches } from '@/components/landing/FinishedMatches';\n\nexport default function Home() {\n  return (\n    <div className=\"flex min-h-screen flex-col bg-[hsl(var(--background))]\">\n      <Header />\n      <main className=\"flex-1\">\n        <Hero />\n        <LiveMatchesBanner />\n        <section id=\"teams\" className=\"py-20 text-center\">\n          <h2 className=\"text-3xl font-bold\">Equipos</h2>\n          <p className=\"text-muted-foreground mt-2\">Próximamente...</p>\n        </section>\n        <FinishedMatches />\n      </main>\n      <Footer />\n    </div>\n  );\n}\n"
                },
                {
                    "nombre": "blog",
                    "tipo": "directorio",
                    "hijos": [
                        {
                            "nombre": "page",
                            "tipo": "directorio",
                            "hijos": [
                                {
                                    "nombre": "[page]",
                                    "tipo": "directorio",
                                    "hijos": []
                                }
                            ]
                        },
                        {
                            "nombre": "page.tsx",
                            "tipo": "archivo",
                            "contenido": "\nimport { Header } from '@/components/layout/header';\nimport { Footer } from '@/components/layout/footer';\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport Link from 'next/link';\nimport { ArrowRight } from 'lucide-react';\n\n// Mock data for blog posts. In a real app, this would come from a database or CMS.\nconst mockPosts = [\n  {\n    slug: 'nueva-temporada-arranca-fuerte',\n    title: 'La nueva temporada de la Liga de Futsal arranca con todo',\n    description: 'Los equipos favoritos no decepcionaron en la primera jornada, con goleadas y partidos vibrantes que prometen un año emocionante.',\n    date: '2024-08-01',\n    author: 'Juan Pérez',\n    category: 'Noticias',\n  },\n  {\n    slug: 'sorpresa-en-la-copa',\n    title: '¡Sorpresa en la Copa! Equipo revelación elimina al campeón',\n    description: 'Nadie lo vio venir. El equipo ascendido esta temporada logró una victoria histórica contra el actual campeón, dejándolo fuera de la copa.',\n    date: '2024-07-28',\n    author: 'Ana García',\n    category: 'Resultados',\n  },\n  {\n    slug: 'fichajes-mercado-de-pases',\n    title: 'Análisis de los fichajes clave para el segundo semestre',\n    description: 'Repasamos los movimientos más importantes del mercado de pases y cómo podrían impactar en el rendimiento de los equipos de cara a la recta final.',\n    date: '2024-07-25',\n    author: 'Carlos Martinez',\n    category: 'Análisis',\n  }\n];\n\nexport default function BlogPage() {\n  return (\n    <div className=\"flex min-h-screen flex-col bg-background\">\n      <Header />\n      <main className=\"container mx-auto flex-1 p-4 py-8 md:p-8\">\n        <div className=\"mb-8 text-center\">\n          <h1 className=\"text-4xl font-bold text-primary\">Blog de Noticias</h1>\n          <p className=\"mt-2 text-muted-foreground\">\n            Las últimas novedades y análisis de la Liga Canelones Futsal.\n          </p>\n        </div>\n\n        <div className=\"mx-auto max-w-4xl space-y-8\">\n          {mockPosts.map((post) => (\n            <Card key={post.slug} className=\"overflow-hidden shadow-lg transition-shadow duration-300 hover:shadow-primary/20\">\n              <CardHeader>\n                <CardTitle className=\"text-2xl hover:text-primary\">\n                  <Link href={`/blog/${post.slug}`}>{post.title}</Link>\n                </CardTitle>\n                <CardDescription>\n                  <span>Por {post.author}</span> | <span>{new Date(post.date).toLocaleDateString('es-UY', { year: 'numeric', month: 'long', day: 'numeric' })}</span> | <span>Categoría: {post.category}</span>\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">{post.description}</p>\n              </CardContent>\n              <CardFooter>\n                <Button asChild variant=\"link\" className=\"p-0\">\n                  <Link href={`/blog/${post.slug}`}>\n                    Leer más <ArrowRight className=\"ml-2 h-4 w-4\" />\n                  </Link>\n                </Button>\n              </CardFooter>\n            </Card>\n          ))}\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n"
                        },
                        {
                            "nombre": "[single]",
                            "tipo": "directorio",
                            "hijos": [
                                {
                                    "nombre": "page.tsx",
                                    "tipo": "archivo",
                                    "contenido": "\nimport { Header } from '@/components/layout/header';\nimport { Footer } from '@/components/layout/footer';\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';\nimport { notFound } from 'next/navigation';\nimport Link from 'next/link';\nimport { Button } from '@/components/ui/button';\nimport { ArrowLeft } from 'lucide-react';\n\n// Mock data for blog posts. In a real app, this would come from a database or CMS.\nconst mockPosts = [\n  {\n    slug: 'nueva-temporada-arranca-fuerte',\n    title: 'La nueva temporada de la Liga de Futsal arranca con todo',\n    description: 'Los equipos favoritos no decepcionaron en la primera jornada, con goleadas y partidos vibrantes que prometen un año emocionante.',\n    date: '2024-08-01',\n    author: 'Juan Pérez',\n    category: 'Noticias',\n    content: `\n<p>La primera fecha de la temporada ha dejado claro que este año la competencia será más reñida que nunca. Los equipos favoritos, como \"Los Quitu\" y \"Valdearcos\", comenzaron con el pie derecho, asegurando victorias contundentes que los posicionan como los rivales a vencer.</p>\n<p>El partido inaugural vio a \"Los Quitu\" enfrentarse a \"La Papa Madre\" en un encuentro que, si bien se esperaba parejo, terminó con una goleada de 7-2. La eficacia de los delanteros y una defensa sólida fueron las claves para un resultado tan abultado. Daniel Fernández, con un hat-trick, se perfila como uno de los goleadores del campeonato.</p>\n<p>Por otro lado, \"Wanderers\" y \"JCC 1930\" protagonizaron el partido más emocionante de la jornada. Un empate 4-4 que se definió en los últimos segundos dejó a los espectadores al borde de sus asientos. Ambos equipos mostraron un gran nivel y demostraron por qué son considerados candidatos al título.</p>\n<h3 class=\"text-xl font-bold mt-6 mb-2\">Declaraciones post-partido</h3>\n<blockquote class=\"border-l-4 border-primary pl-4 italic text-muted-foreground\">\n\"Sabíamos que iba a ser un partido difícil, pero el equipo respondió. Estamos contentos con el resultado y ya pensamos en el próximo rival\", declaró el capitán de Wanderers.\n</blockquote>\n<p class=\"mt-4\">La próxima jornada promete más emociones, con enfrentamientos directos entre equipos de la parte alta de la tabla. ¡No te pierdas la cobertura completa en nuestro sitio!</p>\n`\n  },\n  {\n    slug: 'sorpresa-en-la-copa',\n    title: '¡Sorpresa en la Copa! Equipo revelación elimina al campeón',\n    description: 'Nadie lo vio venir. El equipo ascendido esta temporada logró una victoria histórica contra el actual campeón, dejándolo fuera de la copa.',\n    date: '2024-07-28',\n    author: 'Ana García',\n    category: 'Resultados',\n    content: '<p>Contenido del post sobre la sorpresa en la copa...</p>'\n  },\n  {\n    slug: 'fichajes-mercado-de-pases',\n    title: 'Análisis de los fichajes clave para el segundo semestre',\n    description: 'Repasamos los movimientos más importantes del mercado de pases y cómo podrían impactar en el rendimiento de los equipos de cara a la recta final.',\n    date: '2024-07-25',\n    author: 'Carlos Martinez',\n    category: 'Análisis',\n    content: '<p>Contenido del post sobre fichajes...</p>'\n  }\n];\n\ninterface PostPageProps {\n  params: {\n    single: string;\n  };\n}\n\nexport default function SinglePostPage({ params }: PostPageProps) {\n  const post = mockPosts.find(p => p.slug === params.single);\n\n  if (!post) {\n    notFound();\n  }\n\n  return (\n    <div className=\"flex min-h-screen flex-col bg-background\">\n      <Header />\n      <main className=\"container mx-auto flex-1 p-4 py-8 md:p-8\">\n        <div className=\"mx-auto max-w-3xl\">\n          <Button asChild variant=\"outline\" className=\"mb-8\">\n            <Link href=\"/blog\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Volver al Blog\n            </Link>\n          </Button>\n\n          <article>\n            <header className=\"mb-8\">\n              <h1 className=\"text-4xl font-bold text-primary leading-tight\">{post.title}</h1>\n              <p className=\"mt-2 text-muted-foreground\">\n                <span>Por {post.author}</span> | <span>{new Date(post.date).toLocaleDateString('es-UY', { year: 'numeric', month: 'long', day: 'numeric' })}</span>\n              </p>\n              <p className=\"mt-1 text-sm font-semibold text-accent\">{post.category}</p>\n            </header>\n            \n            <div \n              className=\"prose dark:prose-invert max-w-none\"\n              dangerouslySetInnerHTML={{ __html: post.content }}\n            />\n          </article>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\n// Generate static paths for all posts\nexport async function generateStaticParams() {\n  return mockPosts.map(post => ({\n    single: post.slug,\n  }));\n}\n"
                                }
                            ]
                        }
                    ]
                },
                {
                    "nombre": "banner",
                    "tipo": "directorio",
                    "hijos": [
                        {
                            "nombre": "[id]",
                            "tipo": "directorio",
                            "hijos": [
                                {
                                    "nombre": "page.tsx",
                                    "tipo": "archivo",
                                    "contenido": "\n'use client';\n\nimport { useEffect, useState } from 'react';\nimport { notFound, useParams } from 'next/navigation';\nimport { getMatchById } from '@/actions/match-actions';\nimport { ScoreboardHeader } from '@/components/banner/ScoreboardHeader';\nimport type { FullMatch, GameState, MatchStatus } from '@/types';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { useLiveMatchState } from '@/hooks/useLiveMatchState';\n\nfunction getPeriodLabel(status: MatchStatus, period: number): string {\n    switch (status) {\n        case 'FINISHED':\n            return 'FINAL';\n        case 'SCHEDULED':\n            return 'PROGRAMADO';\n        case 'LIVE':\n            if (period === 1) return 'PERÍODO 1';\n            if (period === 2) return 'PERÍODO 2';\n            return 'EN VIVO';\n        default:\n            return '';\n    }\n}\n\nfunction BannerPageSkeleton() {\n    return (\n        <div className=\"flex min-h-screen flex-col items-center justify-center bg-background p-4 md:p-8\">\n            <Skeleton className=\"h-[200px] w-full max-w-6xl\" />\n        </div>\n    )\n}\n\nexport default function BannerPage() {\n    const params = useParams();\n    const matchId = params.id as string;\n    \n    const [initialMatch, setInitialMatch] = useState<FullMatch | null>(null);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        if (matchId) {\n            getMatchById(matchId).then(data => {\n                if (data) {\n                    setInitialMatch(data);\n                }\n                setLoading(false);\n            });\n        }\n    }, [matchId]);\n\n    const liveState = useLiveMatchState(matchId, initialMatch);\n\n    if (loading) {\n        return <BannerPageSkeleton />;\n    }\n\n    if (!liveState) {\n        notFound();\n    }\n    \n    const {teamA, teamB, scoreA, scoreB, foulsA, foulsB, timeoutsA, timeoutsB, period, time, status} = liveState;\n\n    if(!teamA || !teamB) {\n        return <BannerPageSkeleton />;\n    }\n\n    return (\n        // Contenedor principal para centrar el Scoreboard en toda la pantalla\n        <div className=\"flex min-h-screen w-full flex-col items-center justify-center bg-background p-4 md:p-8\">\n            <ScoreboardHeader\n                team1Name={teamA.name}\n                team1Logo={teamA.logoUrl || ''}\n                score1={scoreA}\n                fouls1={foulsA} \n                timeouts1={timeoutsA}\n                team2Name={teamB.name}\n                team2Logo={teamB.logoUrl || ''}\n                score2={scoreB}\n                fouls2={foulsB}\n                timeouts2={timeoutsB}\n                timeLeft={time}\n                period={getPeriodLabel(status, period)}\n            />\n        </div>\n    );\n}\n"
                                }
                            ]
                        },
                        {
                            "nombre": "page.tsx",
                            "tipo": "archivo",
                            "contenido": "\nimport { getAllMatches } from '@/actions/match-actions';\nimport { Header } from '@/components/layout/header';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport Link from 'next/link';\nimport { Tv } from 'lucide-react';\nimport Image from 'next/image';\n\nexport default async function BannerSelectionPage() {\n  const allMatches = await getAllMatches();\n  const liveMatches = allMatches.filter(match => match.status === 'LIVE');\n\n  return (\n    <div className=\"flex min-h-screen flex-col bg-background\">\n      <Header />\n      <main className=\"container mx-auto flex flex-1 flex-col p-4 py-8 md:p-8\">\n        <div className=\"mb-8 text-center\">\n          <h1 className=\"text-4xl font-bold text-primary\">Partidos en Vivo</h1>\n          <p className=\"mt-2 text-muted-foreground\">Selecciona un partido para ver el marcador en vivo.</p>\n        </div>\n\n        {liveMatches.length > 0 ? (\n          <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3\">\n            {liveMatches.map((match) => (\n              <Link href={`/banner/${match.id}`} key={match.id}>\n                <Card className=\"flex h-full flex-col overflow-hidden shadow-lg transition-transform duration-300 hover:scale-[1.02] hover:shadow-primary/20\">\n                  <CardHeader className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                        <CardTitle className=\"text-lg font-bold text-card-foreground\">\n                            {match.teamA.name} vs {match.teamB.name}\n                        </CardTitle>\n                        <Badge variant=\"destructive\" className=\"animate-pulse\">\n                            <Tv className=\"mr-2 h-4 w-4\" />\n                            EN VIVO\n                        </Badge>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"flex flex-grow items-center justify-around p-4\">\n                    <div className=\"flex flex-col items-center gap-2 text-center\">\n                       <Image\n                            src={match.teamA.logoUrl || `https://avatar.vercel.sh/${match.teamA.name}.png`}\n                            alt={`Logo de ${match.teamA.name}`}\n                            width={64}\n                            height={64}\n                            className=\"rounded-full aspect-square object-contain\"\n                        />\n                      <span className=\"font-semibold\">{match.teamA.name}</span>\n                    </div>\n                    <span className=\"text-2xl font-bold text-primary\">{match.scoreA} - {match.scoreB}</span>\n                    <div className=\"flex flex-col items-center gap-2 text-center\">\n                        <Image\n                            src={match.teamB.logoUrl || `https://avatar.vercel.sh/${match.teamB.name}.png`}\n                            alt={`Logo de ${match.teamB.name}`}\n                            width={64}\n                            height={64}\n                            className=\"rounded-full aspect-square object-contain\"\n                        />\n                      <span className=\"font-semibold\">{match.teamB.name}</span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </Link>\n            ))}\n          </div>\n        ) : (\n          <div className=\"flex h-40 flex-col items-center justify-center rounded-lg border-2 border-dashed border-muted-foreground/30 bg-muted/50 text-center\">\n            <h3 className=\"text-xl font-semibold text-muted-foreground\">No hay partidos en vivo en este momento.</h3>\n            <p className=\"mt-2 text-sm text-muted-foreground\">Por favor, vuelve a intentarlo más tarde.</p>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n"
                        }
                    ]
                },
                {
                    "nombre": "controles",
                    "tipo": "directorio",
                    "hijos": [
                        {
                            "nombre": "[id]",
                            "tipo": "directorio",
                            "hijos": [
                                {
                                    "nombre": "page.tsx",
                                    "tipo": "archivo",
                                    "contenido": "\n'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'next/navigation';\nimport { Header } from '@/components/layout/header';\nimport { useToast } from '@/hooks/use-toast';\nimport { getMatchById } from '@/actions/match-actions';\nimport type { FullMatch } from '@/types';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Button } from '@/components/ui/button';\nimport { ArrowLeft } from 'lucide-react';\nimport Link from 'next/link';\n\nimport { GameProvider } from '@/contexts/GameProvider';\nimport { Scoreboard } from '@/components/controles/Scoreboard';\nimport { GameControls } from '@/components/controles/GameControls';\nimport { EventButtons } from '@/components/controles/EventButtons';\n\nfunction MatchControlSkeleton() {\n    return (\n      <div className=\"container mx-auto py-8 px-4\">\n        <Skeleton className=\"h-8 w-32 mb-8\" />\n        <Skeleton className=\"h-40 w-full mb-8\" />\n        <div className=\"flex gap-8\">\n            <Skeleton className=\"h-80 flex-1\" />\n            <Skeleton className=\"h-80 w-full max-w-sm\" />\n            <Skeleton className=\"h-80 flex-1\" />\n        </div>\n      </div>\n    );\n}\n\nexport default function MatchControlPage() {\n  const params = useParams();\n  const id = params.id as string;\n  const { toast } = useToast();\n\n  const [match, setMatch] = useState<FullMatch | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (id) {\n      async function loadMatch() {\n        setLoading(true);\n        setError(null);\n        try {\n          const fetchedMatch = await getMatchById(id);\n          if (fetchedMatch) {\n            setMatch(fetchedMatch);\n          } else {\n            setError('Partido no encontrado.');\n          }\n        } catch (err) {\n          const errorMessage = err instanceof Error ? err.message : 'No se pudo cargar el partido.';\n          setError(errorMessage);\n          toast({\n            variant: 'destructive',\n            title: 'Error de Carga',\n            description: errorMessage,\n          });\n        } finally {\n          setLoading(false);\n        }\n      }\n      loadMatch();\n    }\n  }, [id, toast]);\n  \n  if (loading) {\n    return (\n        <div className=\"flex min-h-screen flex-col bg-[hsl(var(--background))]\">\n            <Header />\n            <main className=\"container mx-auto py-8 px-4\">\n                <MatchControlSkeleton />\n            </main>\n        </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex min-h-screen flex-col bg-[hsl(var(--background))]\">\n        <Header />\n        <div className=\"container mx-auto py-8 px-4 text-center\">\n            <h1 className=\"text-2xl font-bold text-destructive mb-4\">Error</h1>\n            <p className=\"text-muted-foreground\">{error}</p>\n            <Button asChild className=\"mt-4\">\n                <Link href=\"/controles\">Volver a Controles</Link>\n            </Button>\n        </div>\n      </div>\n    );\n  }\n  \n  if (!match) return null;\n\n  return (\n    <GameProvider match={match}>\n      <div className=\"flex flex-col h-screen bg-background text-foreground\">\n        <Header />\n        <main className=\"container mx-auto px-4 py-4 flex-grow flex flex-col h-main-content\">\n           <div className=\"w-full flex justify-start mb-4 max-w-7xl mx-auto flex-shrink-0\">\n              <Button variant=\"outline\" asChild>\n                  <Link href=\"/controles\">\n                      <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                      Volver a Controles\n                  </Link>\n              </Button>\n          </div>\n          <div className=\"flex-shrink-0 w-full max-w-7xl mx-auto\">\n            <Scoreboard />\n          </div>\n          <div className=\"flex-shrink-0 pt-4 w-full max-w-7xl mx-auto\">\n            <EventButtons />\n          </div>\n          <div className=\"flex-grow pt-4 w-full max-w-7xl mx-auto\">\n            <GameControls />\n          </div>\n        </main>\n      </div>\n    </GameProvider>\n  );\n}\n"
                                }
                            ]
                        },
                        {
                            "nombre": "page.tsx",
                            "tipo": "archivo",
                            "contenido": "'use client';\n\nimport { useEffect, useState } from 'react';\nimport { Header } from '@/components/layout/header';\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';\nimport { ControlMatchCard } from '@/components/controles/ControlMatchCard';\nimport { MatchListSkeleton } from '@/components/controles/MatchListSkeleton';\nimport { useToast } from '@/hooks/use-toast';\nimport { getAllMatches } from '@/actions/match-actions';\nimport type { FullMatch, MatchStatus } from '@/types';\n\nexport default function ControlesPage() {\n  const [matches, setMatches] = useState<FullMatch[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState<MatchStatus>('SCHEDULED');\n  const [error, setError] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    async function loadMatches() {\n      setLoading(true);\n      setError(null);\n      try {\n        const fetchedMatches = await getAllMatches();\n        setMatches(fetchedMatches);\n      } catch (err) {\n        const errorMessage = err instanceof Error ? err.message : 'No se pudieron cargar los partidos.';\n        setError(errorMessage);\n        toast({\n          variant: 'destructive',\n          title: 'Error de Carga',\n          description: errorMessage,\n        });\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    loadMatches();\n  }, [toast]);\n\n  const filteredMatches = matches.filter((m) => m.status === activeTab);\n\n  return (\n    <div className=\"flex min-h-screen flex-col bg-[hsl(var(--background))]\">\n      <Header />\n      <main className=\"container mx-auto py-8 px-4\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6\">\n            <h1 className=\"text-3xl font-bold text-primary mb-4 sm:mb-0\">\n            Control de Partidos\n            </h1>\n            <Tabs\n            defaultValue=\"SCHEDULED\"\n            onValueChange={(value) => setActiveTab(value as MatchStatus)}\n            aria-label=\"Filtrar partidos por estado\"\n            className=\"w-full sm:w-auto\"\n            >\n            <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"SCHEDULED\" role=\"tab\">\n                Programados\n                </TabsTrigger>\n                <TabsTrigger value=\"LIVE\" role=\"tab\">\n                En Vivo\n                </TabsTrigger>\n                <TabsTrigger value=\"FINISHED\" role=\"tab\">\n                Finalizados\n                </TabsTrigger>\n            </TabsList>\n            </Tabs>\n        </div>\n\n        {loading ? (\n          <MatchListSkeleton />\n        ) : error ? (\n          <div className=\"flex justify-center items-center h-40 text-center text-red-500 bg-red-500/10 rounded-lg\">\n            <p>Error: {error}</p>\n          </div>\n        ) : filteredMatches.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n            {filteredMatches.map((match) => (\n              <ControlMatchCard key={match.id} match={match} />\n            ))}\n          </div>\n        ) : (\n          <div className=\"flex justify-center items-center h-40 text-center text-muted-foreground bg-secondary/50 rounded-lg\">\n            <p>No hay partidos en este estado.</p>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n"
                        }
                    ]
                },
                {
                    "nombre": "partidos",
                    "tipo": "directorio",
                    "hijos": [
                        {
                            "nombre": "[id]",
                            "tipo": "directorio",
                            "hijos": [
                                {
                                    "nombre": "page.tsx",
                                    "tipo": "archivo",
                                    "contenido": "\nimport { getMatchById } from '@/actions/match-actions';\nimport { ScoreboardHeader } from '@/components/banner/ScoreboardHeader';\nimport { Header } from '@/components/layout/header';\nimport type { MatchStatus } from '@/types';\nimport { notFound } from 'next/navigation';\n\ninterface MatchPageProps {\n    params: {\n        id: string;\n    }\n}\n\nfunction getPeriodLabel(status: MatchStatus, period: number | undefined): string {\n    switch (status) {\n        case 'FINISHED':\n            return 'FINAL';\n        case 'SCHEDULED':\n            return 'PROGRAMADO';\n        case 'LIVE':\n            if (period === 1) return 'PERÍODO 1';\n            if (period === 2) return 'PERÍODO 2';\n            return 'EN VIVO';\n        default:\n            return '';\n    }\n}\n\nexport default async function MatchPage({ params }: MatchPageProps) {\n    const match = await getMatchById(params.id);\n\n    if (!match) {\n        notFound();\n    }\n    \n    // Simulate some live data for now\n    const liveTime = match.status === 'LIVE' ? 1200 - ((new Date().getMinutes() * 60 + new Date().getSeconds()) % 1200) : 1200;\n    const livePeriod = match.status === 'LIVE' ? (new Date().getMinutes() > 20 ? 2 : 1) : 1;\n\n\n    return (\n        <div className=\"flex min-h-screen flex-col bg-background\">\n            <Header />\n            <main className=\"container mx-auto flex flex-1 flex-col items-center justify-center p-4 md:p-8\">\n                <div className=\"w-full text-center mb-8\">\n                    <h1 className=\"text-4xl font-bold text-primary\">Marcador en Vivo</h1>\n                    <p className=\"text-muted-foreground mt-2\">Sigue toda la acción del partido minuto a minuto.</p>\n                </div>\n\n                <ScoreboardHeader\n                    team1Name={match.teamA.name}\n                    team1Logo={match.teamA.logoUrl || ''}\n                    score1={match.scoreA}\n                    fouls1={match.id.charCodeAt(match.id.length-1) % 6} \n                    timeouts1={match.id.charCodeAt(match.id.length-1) % 2}\n                    team2Name={match.teamB.name}\n                    team2Logo={match.teamB.logoUrl || ''}\n                    score2={match.scoreB}\n                    fouls2={(match.id.charCodeAt(match.id.length-1) + 1) % 6}\n                    timeouts2={(match.id.charCodeAt(match.id.length-1) + 1) % 2}\n                    timeLeft={liveTime}\n                    period={getPeriodLabel(match.status, livePeriod)}\n                />\n                \n                <div className=\"mt-8 text-center text-muted-foreground\">\n                    <p>Esta página se actualizará en tiempo real en futuras versiones.</p>\n                </div>\n            </main>\n        </div>\n    );\n}\n"
                                },
                                {
                                    "nombre": "estadisticas",
                                    "tipo": "directorio",
                                    "hijos": [
                                        {
                                            "nombre": "page.tsx",
                                            "tipo": "archivo",
                                            "contenido": "\nimport { notFound } from 'next/navigation';\nimport { getMatchStats } from '@/actions/match-actions';\nimport { Header } from '@/components/layout/header';\nimport { Footer } from '@/components/layout/footer';\nimport { ScoreSummary } from '@/components/partidos/estadisticas/ScoreSummary';\nimport { StatCard } from '@/components/partidos/estadisticas/StatCard';\nimport { EventsList } from '@/components/partidos/estadisticas/EventsList';\nimport { SummaryHeader } from '@/components/partidos/estadisticas/SummaryHeader';\nimport { FutsalBallIcon } from '@/components/icons';\nimport { Hand } from 'lucide-react';\n\ninterface EstadisticasPageProps {\n  params: {\n    id: string;\n  };\n}\n\nexport default async function EstadisticasPage({ params }: EstadisticasPageProps) {\n  const match = await getMatchStats(params.id);\n\n  if (!match) {\n    notFound();\n  }\n\n  const topScorer = match.stats.topScorers[0];\n  const assistsLeader = match.stats.assistsLeaders[0];\n\n  return (\n    <div className=\"flex min-h-screen flex-col bg-background\">\n      <Header />\n      <main className=\"container mx-auto flex-1 p-4 py-8 md:p-8\">\n        <SummaryHeader match={match} />\n\n        <div className=\"mt-8 max-w-5xl mx-auto\">\n          <ScoreSummary match={match} />\n        </div>\n\n        <section className=\"mt-12 max-w-5xl mx-auto\">\n          <h2 className=\"text-2xl sm:text-3xl font-bold text-center mb-6\">Jugadores Destacados</h2>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-6\">\n            <StatCard\n              title=\"Goleador del Partido\"\n              icon={<FutsalBallIcon className=\"w-6 h-6 text-primary\" />}\n              value={topScorer ? topScorer.player.name : 'N/D'}\n              description={topScorer ? `${topScorer.count} goles` : 'No hubo goles'}\n            />\n            <StatCard\n              title=\"Líder en Asistencias\"\n              icon={<Hand className=\"w-6 h-6 text-blue-500\" />}\n              value={assistsLeader ? assistsLeader.player.name : 'N/D'}\n              description={assistsLeader ? `${assistsLeader.count} asistencias` : 'No hubo asistencias'}\n            />\n          </div>\n        </section>\n\n        <section className=\"mt-12 max-w-5xl mx-auto\">\n             <h2 className=\"text-2xl sm:text-3xl font-bold text-center mb-6\">Línea de Tiempo</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                <EventsList title=\"Goles\" events={match.events || []} eventType=\"GOAL\" />\n                <EventsList title=\"Faltas Cometidas\" events={match.events || []} eventType=\"FOUL\" />\n            </div>\n        </section>\n\n      </main>\n      <Footer />\n    </div>\n  );\n}\n"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "nombre": "page.tsx",
                            "tipo": "archivo",
                            "contenido": "\nimport { getAllMatches } from '@/actions/match-actions';\nimport { Header } from '@/components/layout/header';\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { Calendar, Clock, BarChart2, Tv } from 'lucide-react';\nimport type { FullMatch, MatchStatus } from '@/types';\n\nfunction MatchCard({ match }: { match: FullMatch }) {\n    const scheduledDateTime = new Date(match.scheduledTime);\n    const formattedDate = scheduledDateTime.toLocaleDateString('es-UY', {\n        day: 'numeric',\n        month: 'long',\n    });\n    const formattedTime = scheduledDateTime.toLocaleTimeString('es-UY', {\n        hour: '2-digit',\n        minute: '2-digit',\n    });\n\n    const getStatusInfo = () => {\n        switch (match.status) {\n            case 'LIVE':\n                return { text: 'En Vivo', variant: 'destructive', pulse: true };\n            case 'FINISHED':\n                return { text: 'Finalizado', variant: 'default', pulse: false };\n            case 'SCHEDULED':\n            default:\n                return { text: 'Programado', variant: 'secondary', pulse: false };\n        }\n    };\n    const statusInfo = getStatusInfo();\n    \n    const CardWrapper = ({children}: {children: React.ReactNode}) => {\n        if (match.status === 'FINISHED') {\n             return <Link href={`/partidos/${match.id}/estadisticas`}>{children}</Link>;\n        }\n        if (match.status === 'LIVE') {\n            return <Link href={`/partidos/${match.id}`}>{children}</Link>\n        }\n        return <>{children}</>\n    }\n\n\n    return (\n        <CardWrapper>\n         <Card className=\"flex h-full flex-col overflow-hidden shadow-lg transition-transform duration-300 hover:scale-[1.02] hover:shadow-primary/20 bg-card\">\n            <CardHeader className=\"p-4 bg-card-foreground/5\">\n                <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-base font-bold truncate text-card-foreground\">\n                        {match.teamA.name} vs {match.teamB.name}\n                    </CardTitle>\n                     <Badge variant={statusInfo.variant} className={statusInfo.pulse ? 'animate-pulse' : ''}>\n                        {statusInfo.text}\n                    </Badge>\n                </div>\n            </CardHeader>\n            <CardContent className=\"flex-grow p-4 space-y-4\">\n                <div className=\"flex justify-around items-center\">\n                    <div className=\"flex flex-col items-center gap-2 text-center w-24\">\n                        <Image\n                            src={match.teamA.logoUrl || `https://avatar.vercel.sh/${match.teamA.name}.png`}\n                            alt={`Logo de ${match.teamA.name}`}\n                            width={64}\n                            height={64}\n                            className=\"rounded-full aspect-square object-contain\"\n                        />\n                        <span className=\"font-semibold text-sm truncate w-full\">{match.teamA.name}</span>\n                    </div>\n\n                    {match.status !== 'SCHEDULED' ? (\n                        <span className=\"text-2xl font-bold text-primary\">{match.scoreA} - {match.scoreB}</span>\n                    ) : (\n                        <span className=\"text-xl font-bold text-muted-foreground\">VS</span>\n                    )}\n\n                    <div className=\"flex flex-col items-center gap-2 text-center w-24\">\n                        <Image\n                            src={match.teamB.logoUrl || `https://avatar.vercel.sh/${match.teamB.name}.png`}\n                            alt={`Logo de ${match.teamB.name}`}\n                            width={64}\n                            height={64}\n                            className=\"rounded-full aspect-square object-contain\"\n                        />\n                        <span className=\"font-semibold text-sm truncate w-full\">{match.teamB.name}</span>\n                    </div>\n                </div>\n                <div className=\"text-sm text-muted-foreground flex flex-col space-y-2 pt-4 border-t border-border\">\n                    <div className=\"flex items-center gap-2\">\n                        <Calendar className=\"h-4 w-4\" />\n                        <span>{formattedDate}</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                        <Clock className=\"h-4 w-4\" />\n                        <span>{formattedTime} hs.</span>\n                    </div>\n                </div>\n            </CardContent>\n            <CardFooter className=\"p-0\">\n             {match.status === 'FINISHED' && (\n                <div className=\"w-full block p-4 bg-accent text-accent-foreground text-center font-semibold hover:bg-accent/90 transition-colors\">\n                    <div className=\"flex items-center justify-center\">\n                        <BarChart2 className=\"mr-2 h-4 w-4\" />\n                        Ver Estadísticas\n                    </div>\n                </div>\n            )}\n             {match.status === 'LIVE' && (\n                <div className=\"w-full block p-4 bg-destructive text-destructive-foreground text-center font-semibold hover:bg-destructive/90 transition-colors\">\n                    <div className=\"flex items-center justify-center\">\n                        <Tv className=\"mr-2 h-4 w-4\" />\n                        Ver en Vivo\n                    </div>\n                </div>\n             )}\n            </CardFooter>\n        </Card>\n        </CardWrapper>\n    );\n}\n\nfunction MatchList({ matches }: { matches: FullMatch[] }) {\n    if (matches.length === 0) {\n        return (\n            <div className=\"flex h-40 flex-col items-center justify-center rounded-lg border-2 border-dashed border-muted-foreground/30 bg-muted/50 text-center\">\n                <h3 className=\"text-xl font-semibold text-muted-foreground\">No hay partidos en este estado.</h3>\n            </div>\n        );\n    }\n    return (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {matches.map(match => (\n                <MatchCard key={match.id} match={match} />\n            ))}\n        </div>\n    );\n}\n\n\nexport default async function PartidosPage() {\n  const allMatches = await getAllMatches();\n\n  const scheduled = allMatches.filter(m => m.status === 'SCHEDULED');\n  const live = allMatches.filter(m => m.status === 'LIVE');\n  const finished = allMatches.filter(m => m.status === 'FINISHED');\n\n  return (\n    <div className=\"flex min-h-screen flex-col bg-background\">\n      <Header />\n      <main className=\"container mx-auto flex flex-1 flex-col p-4 py-8 md:p-8\">\n        <div className=\"mb-8 text-center\">\n          <h1 className=\"text-4xl font-bold text-primary\">Calendario de Partidos</h1>\n          <p className=\"mt-2 text-muted-foreground\">Sigue todos los partidos de la liga.</p>\n        </div>\n\n        <Tabs defaultValue=\"live\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3 mx-auto max-w-md\">\n            <TabsTrigger value=\"scheduled\">Programados</TabsTrigger>\n            <TabsTrigger value=\"live\">En Vivo</TabsTrigger>\n            <TabsTrigger value=\"finished\">Finalizados</TabsTrigger>\n          </TabsList>\n          <TabsContent value=\"scheduled\" className=\"mt-6\">\n            <MatchList matches={scheduled} />\n          </TabsContent>\n          <TabsContent value=\"live\" className=\"mt-6\">\n             <MatchList matches={live} />\n          </TabsContent>\n          <TabsContent value=\"finished\" className=\"mt-6\">\n            <MatchList matches={finished} />\n          </TabsContent>\n        </Tabs>\n      </main>\n    </div>\n  );\n}\n"
                        }
                    ]
                },
                {
                    "nombre": "layout.tsx",
                    "tipo": "archivo",
                    "contenido": "import type { Metadata } from 'next';\nimport { Orbitron, Roboto } from 'next/font/google';\nimport './globals.css';\nimport { Toaster } from \"@/components/ui/toaster\";\n\nexport const metadata: Metadata = {\n  title: 'Liga Canelones Futsal',\n  description: 'Toda la pasión del futsal en un solo lugar.',\n};\n\nconst roboto = Roboto({\n  subsets: ['latin'],\n  weight: ['400', '500', '700'],\n  variable: '--font-roboto',\n});\n\nconst orbitron = Orbitron({\n  subsets: ['latin'],\n  weight: ['400', '700', '900'],\n  variable: '--font-orbitron',\n});\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"es\" className={`${roboto.variable} ${orbitron.variable}`} suppressHydrationWarning={true}>\n      <head />\n      <body className=\"font-body antialiased\">\n        {children}\n        <Toaster />\n      </body>\n    </html>\n  );\n}\n"
                }
            ]
        },
        {
            "nombre": "actions",
            "tipo": "directorio",
            "hijos": [
                {
                    "nombre": "match-actions.ts",
                    "tipo": "archivo",
                    "contenido": "\n'use server';\n\nimport type { FullMatch, MatchStatus, MatchStats, GameEvent, Player, Team, GameEventType } from '@/types';\nimport { futsalTeams } from '@/data/teams';\n\n// Helper to get a random player from a team\nconst getRandomPlayer = (team: Team, index: number): Player | undefined => {\n  if (!team.players || team.players.length === 0) return undefined;\n  const playerIndex = index % team.players.length;\n  return team.players[playerIndex];\n};\n\n// Mock data generation\nfunction createMockMatch(id: number, status: MatchStatus): FullMatch {\n  const teamAIndex = id % futsalTeams.length;\n  let teamBIndex = (id + 1) % futsalTeams.length;\n  if (teamAIndex === teamBIndex) {\n    teamBIndex = (teamBIndex + 1) % futsalTeams.length;\n  }\n  const teamA = futsalTeams[teamAIndex];\n  const teamB = futsalTeams[teamBIndex];\n\n  const now = new Date();\n  let scheduledTime: Date;\n  let scoreA = 0;\n  let scoreB = 0;\n  let events: GameEvent[] = [];\n\n  switch (status) {\n    case 'SCHEDULED':\n      scheduledTime = new Date(now.getTime() + (id + 1) * 24 * 60 * 60 * 1000 + 100000);\n      break;\n    case 'LIVE':\n      scheduledTime = new Date(now.getTime() - 30 * 60 * 1000); // 30 mins ago\n      scoreA = (id % 3); \n      scoreB = ((id + 1) % 3);\n      break;\n    case 'FINISHED':\n       scheduledTime = new Date(now.getTime() - (id + 1) * 3 * 60 * 60 * 1000); // Few hours/days ago\n       scoreA = (id % 4) + 1; // Example: 1-4 goals\n       scoreB = ((id + 2) % 4); // Example: 0-3 goals\n       \n       // Generate mock events\n       for (let i = 0; i < scoreA; i++) {\n         const player = getRandomPlayer(teamA, i);\n         if (player) {\n           events.push({ id: `evt-a-goal-${i}`, type: 'GOAL', teamId: 'A', playerId: player.id, playerName: player.name, teamName: teamA.name, timestamp: 600 + i * 120 });\n           // Add a chance for an assist\n           if (i % 2 === 0) {\n             const assister = getRandomPlayer(teamA, i + 1);\n             if (assister && assister.id !== player.id) {\n               events.push({ id: `evt-a-assist-${i}`, type: 'ASSIST', teamId: 'A', playerId: assister.id, playerName: assister.name, teamName: teamA.name, timestamp: 600 + i * 120 - 5 });\n             }\n           }\n         }\n       }\n        for (let i = 0; i < scoreB; i++) {\n         const player = getRandomPlayer(teamB, i);\n         if (player) {\n           events.push({ id: `evt-b-goal-${i}`, type: 'GOAL', teamId: 'B', playerId: player.id, playerName: player.name, teamName: teamB.name, timestamp: 700 + i * 150 });\n         }\n       }\n       // Add some foul events\n       for (let i = 0; i < 3; i++) {\n          const playerA = getRandomPlayer(teamA, i);\n          if (playerA) events.push({ id: `evt-a-foul-${i}`, type: 'FOUL', teamId: 'A', playerId: playerA.id, playerName: playerA.name, teamName: teamA.name, timestamp: 300 + i * 200 });\n          const playerB = getRandomPlayer(teamB, i);\n          if (playerB) events.push({ id: `evt-b-foul-${i}`, type: 'FOUL', teamId: 'B', playerId: playerB.id, playerName: playerB.name, teamName: teamB.name, timestamp: 400 + i * 250 });\n       }\n      break;\n  }\n\n  return {\n    id: `match-${id}`,\n    scheduledTime: scheduledTime.toISOString(),\n    status,\n    teamA,\n    teamB,\n    scoreA,\n    scoreB,\n    events,\n  };\n}\n\nconst mockMatches: FullMatch[] = [\n  ...Array.from({ length: 4 }, (_, i) => createMockMatch(i, 'SCHEDULED')),\n  ...Array.from({ length: 2 }, (_, i) => createMockMatch(i + 4, 'LIVE')),\n  ...Array.from({ length: 6 }, (_, i) => createMockMatch(i + 6, 'FINISHED')),\n];\n\nexport async function getAllMatches(): Promise<FullMatch[]> {\n  console.log('Fetching all matches...');\n  await new Promise(resolve => setTimeout(resolve, 500));\n  return mockMatches;\n}\n\nexport async function getLiveMatches(): Promise<FullMatch[]> {\n    console.log('Fetching live matches...');\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return mockMatches.filter(match => match.status === 'LIVE');\n}\n\nexport async function getFinishedMatches(): Promise<FullMatch[]> {\n    console.log('Fetching finished matches...');\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return mockMatches.filter(match => match.status === 'FINISHED');\n}\n\nexport async function getMatchById(id: string): Promise<FullMatch | undefined> {\n  console.log(`Fetching match with id: ${id}`);\n  await new Promise(resolve => setTimeout(resolve, 500));\n  const match = mockMatches.find(m => m.id === id);\n  return match;\n}\n\nexport async function getMatchStats(id: string): Promise<MatchStats | undefined> {\n  const match = await getMatchById(id);\n  if (!match || !match.events) {\n    return undefined;\n  }\n\n  const allPlayers = [...match.teamA.players, ...match.teamB.players];\n\n  const getStatsForType = (eventType: GameEventType) => {\n    const eventCounts = match.events!\n      .filter(event => event.type === eventType)\n      .reduce((acc, event) => {\n        acc[event.playerId] = (acc[event.playerId] || 0) + 1;\n        return acc;\n      }, {} as Record<number, number>);\n\n    return Object.entries(eventCounts)\n      .map(([playerId, count]) => {\n        const player = allPlayers.find(p => p.id === parseInt(playerId, 10));\n        return player ? { player, count } : null;\n      })\n      .filter((p): p is { player: Player, count: number } => p !== null)\n      .sort((a, b) => b.count - a.count);\n  };\n  \n  const topScorers = getStatsForType('GOAL');\n  const assistsLeaders = getStatsForType('ASSIST');\n  const foulsByPlayer = getStatsForType('FOUL');\n  const shotsByPlayer = getStatsForType('SHOT');\n\n\n  return {\n    ...match,\n    stats: {\n      topScorers: topScorers,\n      assistsLeaders: assistsLeaders,\n      foulsByPlayer: foulsByPlayer,\n      shotsByPlayer: shotsByPlayer,\n    },\n  };\n}\n"
                }
            ]
        },
        {
            "nombre": "data",
            "tipo": "directorio",
            "hijos": [
                {
                    "nombre": "players.ts",
                    "tipo": "archivo",
                    "contenido": "import type { Player } from '@/types';\n\nexport const players: Player[] = [\n    { id: 1, name: \"Daniel Fernández\", number: 27, position: 'Winger' },\n    { id: 2, name: \"Javier Gómez\", number: 2, position: 'Defender' },\n    { id: 3, name: \"Fernando Ruiz\", number: 73, position: 'Winger' },\n    { id: 4, name: \"Sergio Hernández\", number: 12, position: 'Goalkeeper' },\n    { id: 5, name: \"Pablo Díaz\", number: 15, position: 'Pivot' },\n    { id: 6, name: \"Luis Martínez\", number: 1, position: 'Goalkeeper' },\n    { id: 7, name: \"Pablo Ruiz\", number: 97, position: 'Winger' },\n    { id: 8, name: \"Andrés García\", number: 61, position: 'Pivot' },\n    { id: 9, name: \"Matías López\", number: 58, position: 'Winger' },\n    { id: 10, name: \"Matías Sánchez\", number: 98, position: 'Defender' },\n    { id: 11, name: \"Juan Martín\", number: 37, position: 'Winger' },\n    { id: 12, name: \"Diego Fernández\", number: 21, position: 'Winger' },\n    { id: 13, name: \"Diego García\", number: 75, position: 'Winger' },\n    { id: 14, name: \"Juan Jiménez\", number: 12, position: 'Goalkeeper' },\n    { id: 15, name: \"Pablo Martín\", number: 1, position: 'Goalkeeper' },\n    { id: 16, name: \"Pablo Gómez\", number: 14, position: 'Winger' },\n    { id: 17, name: \"Nicolás González\", number: 49, position: 'Pivot' },\n    { id: 18, name: \"Javier García\", number: 66, position: 'Pivot' },\n    { id: 19, name: \"Miguel Martín\", number: 90, position: 'Defender' },\n    { id: 20, name: \"Daniel García\", number: 20, position: 'Winger' },\n    { id: 21, name: \"Miguel González\", number: 49, position: 'Defender' },\n    { id: 22, name: \"Fernando Martínez\", number: 67, position: 'Pivot' },\n    { id: 23, name: \"Andrés Rodríguez\", number: 12, position: 'Goalkeeper' },\n    { id: 24, name: \"Sergio Fernández\", number: 52, position: 'Pivot' },\n    { id: 25, name: \"Matías Sánchez\", number: 97, position: 'Pivot' },\n    { id: 26, name: \"Pablo Sánchez\", number: 68, position: 'Defender' },\n    { id: 27, name: \"Nicolás Fernández\", number: 93, position: 'Winger' },\n    { id: 28, name: \"David García\", number: 1, position: 'Goalkeeper' },\n    { id: 29, name: \"Matías Rodríguez\", number: 31, position: 'Winger' },\n    { id: 30, name: \"Daniel Ruiz\", number: 12, position: 'Goalkeeper' },\n    { id: 31, name: \"José Jiménez\", number: 96, position: 'Defender' },\n    { id: 32, name: \"Andrés Jiménez\", number: 23, position: 'Defender' },\n    { id: 33, name: \"Sergio Jiménez\", number: 66, position: 'Defender' },\n    { id: 34, name: \"Carlos Ruiz\", number: 8, position: 'Defender' },\n    { id: 35, name: \"Javier Ruiz\", number: 72, position: 'Defender' },\n    { id: 36, name: \"Diego Jiménez\", number: 1, position: 'Goalkeeper' },\n    { id: 37, name: \"Miguel López\", number: 69, position: 'Winger' },\n    { id: 38, name: \"Miguel González\", number: 19, position: 'Pivot' },\n    { id: 39, name: \"Carlos Díaz\", number: 83, position: 'Winger' },\n    { id: 40, name: \"Juan Moreno\", number: 12, position: 'Goalkeeper' },\n    { id: 41, name: \"Nicolás Jiménez\", number: 49, position: 'Defender' },\n    { id: 42, name: \"Carlos Fernández\", number: 1, position: 'Goalkeeper' },\n    { id: 43, name: \"Miguel García\", number: 95, position: 'Pivot' },\n    { id: 44, name: \"Diego Martín\", number: 31, position: 'Winger' },\n    { id: 45, name: \"Pablo Díaz\", number: 68, position: 'Pivot' },\n    { id: 46, name: \"Daniel Ruiz\", number: 60, position: 'Winger' },\n    { id: 47, name: \"David Fernández\", number: 77, position: 'Pivot' },\n    { id: 48, name: \"Miguel Hernández\", number: 89, position: 'Winger' },\n    { id: 49, name: \"Andrés Pérez\", number: 19, position: 'Defender' },\n    { id: 50, name: \"Javier López\", number: 54, position: 'Winger' },\n    { id: 51, name: \"Sergio García\", number: 71, position: 'Pivot' },\n    { id: 52, name: \"Nicolás Hernández\", number: 34, position: 'Defender' },\n    { id: 53, name: \"Luis Sánchez\", number: 11, position: 'Winger' },\n    { id: 54, name: \"Carlos Hernández\", number: 12, position: 'Goalkeeper' },\n    { id: 55, name: \"Luis Díaz\", number: 48, position: 'Pivot' },\n    { id: 56, name: \"José Díaz\", number: 35, position: 'Pivot' },\n    { id: 57, name: \"Nicolás García\", number: 1, position: 'Goalkeeper' },\n    { id: 58, name: \"Luis Martín\", number: 18, position: 'Winger' },\n    { id: 59, name: \"Pablo Pérez\", number: 43, position: 'Winger' },\n    { id: 60, name: \"Nicolás Moreno\", number: 17, position: 'Winger' },\n    { id: 61, name: \"Diego Díaz\", number: 12, position: 'Goalkeeper' },\n    { id: 62, name: \"Diego Jiménez\", number: 62, position: 'Defender' },\n    { id: 63, name: \"Juan Jiménez\", number: 47, position: 'Winger' },\n    { id: 64, name: \"Javier Rodríguez\", number: 84, position: 'Defender' },\n    { id: 65, name: \"Pablo García\", number: 1, position: 'Goalkeeper' },\n    { id: 66, name: \"Diego Fernández\", number: 89, position: 'Winger' },\n    { id: 67, name: \"Daniel Jiménez\", number: 41, position: 'Defender' },\n    { id: 68, name: \"Sergio Moreno\", number: 85, position: 'Defender' },\n    { id: 69, name: \"Fernando López\", number: 39, position: 'Pivot' },\n    { id: 70, name: \"Diego López\", number: 11, position: 'Pivot' },\n    { id: 71, name: \"Miguel Gómez\", number: 8, position: 'Defender' },\n    { id: 72, name: \"Diego Ruiz\", number: 67, position: 'Winger' },\n    { id: 73, name: \"Pablo Martín\", number: 12, position: 'Goalkeeper' },\n    { id: 74, name: \"Juan Pérez\", number: 73, position: 'Defender' },\n    { id: 75, name: \"Miguel Pérez\", number: 93, position: 'Winger' },\n    { id: 76, name: \"Diego García\", number: 56, position: 'Pivot' },\n    { id: 77, name: \"Daniel López\", number: 1, position: 'Goalkeeper' },\n    { id: 78, name: \"Diego Jiménez\", number: 57, position: 'Defender' },\n    { id: 79, name: \"Fernando Jiménez\", number: 96, position: 'Defender' },\n    { id: 80, name: \"Sergio Ruiz\", number: 93, position: 'Pivot' },\n    { id: 81, name: \"Nicolás Gómez\", number: 71, position: 'Winger' },\n    { id: 82, name: \"José Díaz\", number: 96, position: 'Defender' },\n    { id: 83, name: \"Matías Moreno\", number: 44, position: 'Winger' },\n    { id: 84, name: \"Miguel Martín\", number: 12, position: 'Goalkeeper' },\n    { id: 85, name: \"Andrés Jiménez\", number: 27, position: 'Pivot' },\n    { id: 86, name: \"David Ruiz\", number: 88, position: 'Pivot' },\n    { id: 87, name: \"Fernando Martín\", number: 1, position: 'Goalkeeper' },\n    { id: 88, name: \"Javier Jiménez\", number: 97, position: 'Winger' },\n    { id: 89, name: \"Matías Ruiz\", number: 31, position: 'Pivot' },\n    { id: 90, name: \"David Gómez\", number: 68, position: 'Pivot' },\n    { id: 91, name: \"David Pérez\", number: 12, position: 'Goalkeeper' },\n    { id: 92, name: \"José Hernández\", number: 1, position: 'Goalkeeper' },\n    { id: 93, name: \"José Díaz\", number: 25, position: 'Winger' },\n    { id: 94, name: \"Javier Díaz\", number: 3, position: 'Winger' },\n    { id: 95, name: \"Sergio González\", number: 6, position: 'Pivot' },\n    { id: 96, name: \"Fernando Martín\", number: 13, position: 'Winger' },\n    { id: 97, name: \"Sergio García\", number: 71, position: 'Winger' },\n    { id: 98, name: \"Miguel Moreno\", number: 84, position: 'Winger' },\n    { id: 99, name: \"Luis Martín\", number: 66, position: 'Defender' },\n    { id: 100, name: \"Javier Hernández\", number: 76, position: 'Winger' },\n    { id: 101, name: \"Nicolás Martínez\", number: 99, position: 'Pivot' },\n    { id: 102, name: \"Diego Martín\", number: 88, position: 'Defender' },\n    { id: 103, name: \"Juan Rodríguez\", number: 62, position: 'Winger' },\n    { id: 104, name: \"Pablo López\", number: 12, position: 'Goalkeeper' },\n    { id: 105, name: \"Fernando Martín\", number: 82, position: 'Pivot' },\n    { id: 106, name: \"Luis Díaz\", number: 1, position: 'Goalkeeper' },\n    { id: 107, name: \"José Díaz\", number: 28, position: 'Defender' },\n    { id: 108, name: \"Andrés Jiménez\", number: 70, position: 'Pivot' },\n    { id: 109, name: \"José Fernández\", number: 59, position: 'Winger' },\n    { id: 110, name: \"Sergio López\", number: 39, position: 'Pivot' },\n    { id: 111, name: \"David Jiménez\", number: 74, position: 'Pivot' },\n    { id: 112, name: \"Nicolás López\", number: 44, position: 'Pivot' },\n    { id: 113, name: \"Luis Martín\", number: 72, position: 'Pivot' },\n    { id: 114, name: \"David Hernández\", number: 12, position: 'Goalkeeper' },\n    { id: 115, name: \"Andrés Pérez\", number: 67, position: 'Pivot' },\n    { id: 116, name: \"Sergio Jiménez\", number: 14, position: 'Defender' },\n    { id: 117, name: \"Pablo López\", number: 1, position: 'Goalkeeper' },\n    { id: 118, name: \"Fernando González\", number: 2, position: 'Pivot' },\n    { id: 119, name: \"Javier Hernández\", number: 81, position: 'Winger' },\n    { id: 120, name: \"Sergio Díaz\", number: 86, position: 'Winger' },\n    { id: 121, name: \"Javier González\", number: 62, position: 'Winger' },\n    { id: 122, name: \"Nicolás Moreno\", number: 33, position: 'Winger' },\n    { id: 123, name: \"Fernando Díaz\", number: 65, position: 'Defender' },\n    { id: 124, name: \"Carlos Jiménez\", number: 66, position: 'Winger' },\n    { id: 125, name: \"Carlos Ruiz\", number: 12, position: 'Goalkeeper' },\n    { id: 126, name: \"Diego Martín\", number: 54, position: 'Winger' },\n    { id: 127, name: \"Luis López\", number: 75, position: 'Pivot' },\n    { id: 128, name: \"Juan Moreno\", number: 88, position: 'Pivot' },\n    { id: 129, name: \"Pablo Ruiz\", number: 1, position: 'Goalkeeper' },\n    { id: 130, name: \"Luis García\", number: 9, position: 'Pivot' },\n    { id: 131, name: \"Nicolás González\", number: 79, position: 'Winger' },\n    { id: 132, name: \"José Martín\", number: 20, position: 'Pivot' },\n    { id: 133, name: \"Matías García\", number: 12, position: 'Goalkeeper' },\n    { id: 134, name: \"Daniel López\", number: 80, position: 'Pivot' },\n    { id: 135, name: \"Fernando Moreno\", number: 28, position: 'Pivot' },\n    { id: 136, name: \"Nicolás Hernández\", number: 47, position: 'Winger' },\n    { id: 137, name: \"Sergio Fernández\", number: 54, position: 'Pivot' },\n    { id: 138, name: \"Juan Sánchez\", number: 96, position: 'Winger' },\n    { id: 139, name: \"Fernando Hernández\", number: 1, position: 'Goalkeeper' },\n    { id: 140, name: \"Diego Sánchez\", number: 61, position: 'Pivot' },\n    { id: 141, name: \"Pablo Fernández\", number: 20, position: 'Winger' },\n    { id: 142, name: \"Matías Sánchez\", number: 40, position: 'Defender' },\n    { id: 143, name: \"Juan Fernández\", number: 4, position: 'Winger' },\n    { id: 144, name: \"Matías Díaz\", number: 51, position: 'Pivot' },\n    { id: 145, name: \"Pablo González\", number: 88, position: 'Pivot' },\n    { id: 146, name: \"Fernando Rodríguez\", number: 12, position: 'Goalkeeper' },\n    { id: 147, name: \"Javier Jiménez\", number: 1, position: 'Goalkeeper' },\n    { id: 148, name: \"Juan Rodríguez\", number: 18, position: 'Pivot' },\n    { id: 149, name: \"Fernando Martínez\", number: 91, position: 'Pivot' }\n  ];"
                },
                {
                    "nombre": "teams.ts",
                    "tipo": "archivo",
                    "contenido": "\nimport type { Team } from '@/types';\nimport { players } from './players';\n\nconst baseTeams: Omit<Team, 'players'>[] = [\n  {\n    id: 1,\n    name: \"LOS QUITU\",\n    logoUrl: \"/equipos/1.png\",\n  },\n  {\n    id: 10,\n    name: \"LA PAPA MADRE\",\n    logoUrl: \"/equipos/10.png\",\n  },\n  {\n    id: 11,\n    name: \"WANDERERS\",\n    logoUrl: \"/equipos/11.png\",\n  },\n  {\n    id: 12,\n    name: \"JCC 1930\",\n    logoUrl: \"/equipos/12.png\",\n  },\n  {\n    id: 13,\n    name: \"STELLA\",\n    logoUrl: \"/equipos/13.png\",\n  },\n  {\n    id: 14,\n    name: \"REAL CANELONES\",\n    logoUrl: \"/equipos/14.png\",\n  },\n  {\n    id: 15,\n    name: \"DAC\",\n    logoUrl: \"/equipos/15.png\",\n  },\n  {\n    id: 2,\n    name: \"VALDEARCOS\",\n    logoUrl: \"/equipos/2.png\",\n  },\n  {\n    id: 3,\n    name: \"NEGRIAZUL\",\n    logoUrl: \"/equipos/3.png\",\n  },\n  {\n    id: 4,\n    name: \"PEDRENSE\",\n    logoUrl: \"/equipos/4.png\",\n  },\n  {\n    id: 5,\n    name: \"LA PIECITA\",\n    logoUrl: \"/equipos/5.png\",\n  },\n  {\n    id: 6,\n    name: \"EL HACHA\",\n    logoUrl: \"/equipos/6.png\",\n  },\n  {\n    id: 7,\n    name: \"MILANO\",\n    logoUrl: \"/equipos/7.png\",\n  },\n  {\n    id: 8,\n    name: \"T. DE CAMPEONES\",\n    logoUrl: \"/equipos/8.png\",\n  },\n  {\n    id: 9,\n    name: \"CAPINCHO\",\n    logoUrl: \"/equipos/9.png\",\n  }\n];\n\n\n// Distribute players to teams\nexport const futsalTeams: Team[] = baseTeams.map((team, index) => {\n  const startIndex = index * 10;\n  const endIndex = startIndex + 10;\n  return {\n    ...team,\n    players: players.slice(startIndex, endIndex)\n  };\n});\n"
                }
            ]
        }
    ]
}