## 1. Introduction

These guidelines are designed to help the AI assistant contribute effectively to the development of this project. They cover specific areas such as code style, component usage, and data handling, ensuring consistency and maintainability across the codebase.

## 2. General Instructions

- **Follow the existing project structure and conventions.**
- **Pay close attention to detail and strive for accuracy.**
- **Ask clarifying questions if anything is unclear.**
- **Prioritize maintainability and readability in all code.**

## 3. Workflow

- **Use Git effectively**: Follow Git best practices for committing changes, writing descriptive commit messages, and branching.
- **Incremental Changes**: Break down large tasks into smaller, manageable chunks and submit pull requests frequently.
- **Code Review**: All changes must be reviewed by a human developer before merging.
- **Provide Full Code**: Always include the full content of the file you are modifying within the ```<changes>`` block when making code changes.
- **ALWAYS** provide the full and complete content of the file. Do not use placeholders or comments indicating partial content.
- **NEVER** add comments to `package.json` or `tsconfig.json`.

## 4. Coding and UI Guidelines

### TypeScript and Next.js

- **'use server' and 'use client'**: Correctly apply these directives. Server Actions and data-fetching components should be Server Components (`'use server'`) unless interactivity requires a Client Component.
- **Server Actions**: Use Server Actions in `src/actions/` for all data mutations (CRUD operations). Do not build separate API routes unless absolutely necessary.
- **Data Fetching**: Use the existing Prisma client (`/src/lib/prisma.ts`) for all database interactions within Server Actions.
- **Type Safety**: Use TypeScript strictly. Add types for all function parameters and return values. Use `type` imports where possible (e.g., `import type { ... } from '...'`).

### Styling and Components

- **Component-First**: Use existing components from `src/components/ui/` (ShadCN) and `src/components/` whenever possible.
- **Theming over Hardcoding**: **NEVER** use hardcoded color classes like `text-red-500` or `bg-blue-700`. **ALWAYS** use semantic theme variables from `globals.css` (e.g., `bg-primary`, `text-destructive`, `border-border`). This ensures brand consistency.
- **Layout and Spacing**: Use Tailwind CSS utility classes for all layout, spacing, and styling needs (e.g., `p-4`, `m-2`, `flex`, `grid`).
- **Responsiveness**: All UI components and pages must be fully responsive and tested for mobile, tablet, and desktop views.

### Generative AI (Genkit)

- **Use Existing Flows**: All AI functionality must be implemented within Genkit flows located in `src/ai/flows/`.
- **Schema Definition**: Define clear input and output schemas for all flows using `zod`.
- **Flow Invocation**: Flows must be called from Server Actions located in `src/actions/`. Do not call flows directly from client-side components.

## 5. Error Handling and Validation

- **Error Prevention**: When working with data that might be `null` or `undefined` (especially from data fetching), always add checks to prevent runtime errors (e.g., `if (!data) { return null; }` or `data?.map(...)`).
- **Form Validation**: All forms must use `zod` for schema-based validation.
- **User Feedback**: Use the `useToast` hook to provide clear feedback to the user after operations (e.g., success or error messages).

By adhering to these rules, the AI will act as a productive and reliable assistant in the development of this project.
